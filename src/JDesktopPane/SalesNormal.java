/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package JDesktopPane;


import java.awt.Font;
import java.awt.Graphics;
import java.awt.List;
import java.awt.PrintJob;
import java.awt.Toolkit;
import java.awt.print.PrinterException;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintException;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.print.attribute.HashAttributeSet;
import javax.print.attribute.standard.PrinterName;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;

/**
 *
 * @author Lypef
 */
public class SalesNormal extends javax.swing.JInternalFrame {

    /**
     * Creates new form SalesNormal
     */
    Clases.ReturnDate datos = new Clases.ReturnDate();
    
    public SalesNormal() {
        initComponents();
        setTitle("Realizar cobro");
        Model();
        FormatDecimal();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaNotaVenta = new javax.swing.JTable();
        TxtTotal = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        TxtExtras = new javax.swing.JLabel();
        TxtConsumo = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        TxtPagaCon = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        TxtCambio = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        jLabel3.setText("00000.00");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Cancel.png"))); // NOI18N
        jButton2.setText("Cancelar venta");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        setIconifiable(true);
        setResizable(true);

        TablaNotaVenta.setAutoCreateRowSorter(true);
        TablaNotaVenta.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        TablaNotaVenta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(TablaNotaVenta);

        TxtTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        TxtTotal.setForeground(new java.awt.Color(255, 0, 0));
        TxtTotal.setText("00000.00");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Print.png"))); // NOI18N
        jButton1.setText("FINALIZAR");
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 0, 0));
        jLabel5.setText("TOTAL :");

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Cancel.png"))); // NOI18N
        jButton3.setText("Cancelar venta");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 0, 0));
        jLabel9.setText("Extras:");

        TxtExtras.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        TxtExtras.setForeground(new java.awt.Color(255, 0, 0));
        TxtExtras.setText("00000.00");

        TxtConsumo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        TxtConsumo.setForeground(new java.awt.Color(255, 0, 0));
        TxtConsumo.setText("00000.00");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 0, 0));
        jLabel6.setText("Productos:");

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Remove.png"))); // NOI18N
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        TxtPagaCon.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        TxtPagaCon.setForeground(new java.awt.Color(255, 0, 0));
        TxtPagaCon.setText("00000.00");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setText("Paga con:");

        TxtCambio.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        TxtCambio.setForeground(new java.awt.Color(255, 0, 0));
        TxtCambio.setText("00000.00");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setText("Cambio:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(TxtPagaCon))
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(TxtCambio))
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(132, 132, 132)
                                            .addComponent(jLabel9))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(124, 124, 124)
                                            .addComponent(jLabel5)))
                                    .addGap(19, 19, 19))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(18, 18, 18)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(TxtTotal)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(TxtConsumo)
                                        .addComponent(TxtExtras))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(5, 5, 5))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel9)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(TxtConsumo)
                                    .addComponent(jLabel6))
                                .addGap(6, 6, 6)
                                .addComponent(TxtExtras))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TxtTotal)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TxtPagaCon)
                    .addComponent(jLabel7)
                    .addComponent(TxtCambio)
                    .addComponent(jLabel8))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            UpdateStockDB();
            
            int x = TablaNotaVenta.getRowCount() -1;
            
            while (x >= 0)
            {
                updateVentabd(Integer.parseInt((String) TablaNotaVenta.getValueAt(x, 0)) , Integer.parseInt( (String) TablaNotaVenta.getValueAt(x, 1)));
                x --;
            }
            
            Sales sales = new Sales();
            sales.DateSearchTable();
            
            System.err.println(datos.ReturnDateMay("ticket"));
            System.err.println(datos.ReturnDateMay("nameprint"));
            System.err.println(datos.ReturnDateMay("ticketcajon"));
            
            if ("1".equals(datos.ReturnDateMay("ticket")))
            {
                PrintOnlyTicket(datos.ReturnDateMay("nameprint"));
            }
            else if ("1".equals(datos.ReturnDateMay("cajon")))
            {
                OpenBox(datos.ReturnDateMay("nameprint"));
            }
            else if ("1".equals(datos.ReturnDateMay("ticketcajon")))
            {
                Print(datos.ReturnDateMay("nameprint"));
            }
                
            
            dispose();
            JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Gracias por su compra");
        } catch (PrintException ex) {
            JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Tenemos problemas con la impresora, la venta no se realizara.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
  
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1KeyPressed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        RemoveProduct();
    }//GEN-LAST:event_jButton4ActionPerformed

    private String fecha()
    {
        Calendar fecha = new GregorianCalendar ();
        int a = fecha.get(Calendar.MONTH);
        int b = a+1;
        
        String dia = Integer.toString(fecha.get(Calendar.DATE));
        String mes = Integer.toString(b);
        String año = Integer.toString(fecha.get(Calendar.YEAR));
        
        return año + "-" +mes +"-"+ dia;
    }
    
    private String Hora ()
    {
        Calendar fecha = new GregorianCalendar ();
        
        String hora = Integer.toString(fecha.get(Calendar.HOUR));
        String minutos = Integer.toString(fecha.get(Calendar.MINUTE));
        String segundos = Integer.toString(fecha.get(Calendar.SECOND));
        
       return hora + ":" + minutos + ":" + segundos; 
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaNotaVenta;
    private javax.swing.JLabel TxtCambio;
    private javax.swing.JLabel TxtConsumo;
    private javax.swing.JLabel TxtExtras;
    private javax.swing.JLabel TxtPagaCon;
    private javax.swing.JLabel TxtTotal;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    DefaultTableModel DefaultTableModel = new DefaultTableModel ();
    String  valores [] = {"Piezas","Id","Codigo de barra","Producto","Precio"};
    public void Model ()
    {
        
        DefaultTableModel.setColumnIdentifiers(valores);
        TablaNotaVenta.setModel(DefaultTableModel);
    }
        public void NotaDeVenta ( int piezas , int id , String CodigoBarra , String Producto , double precio)
    {
        String Valores [] = new String [5];
        
        Valores [0] = String.valueOf(piezas);
        Valores [1] = String.valueOf(id);
        Valores [2] = CodigoBarra;
        Valores [3] = Producto;
        Valores [4] = String.valueOf(precio);
        
        DefaultTableModel.addRow(Valores);
    }
    public void Montos (double total, String extras, double PagaCon)
    {
        DecimalFormat format = new DecimalFormat("0.00");
        TxtConsumo.setText(String.valueOf( total - Double.parseDouble(extras)));
        TxtTotal.setText(String.valueOf(total));
        TxtPagaCon.setText(format.format(PagaCon));
        TxtCambio.setText(format.format(PagaCon - total));
        
        if (!extras.equalsIgnoreCase("$ Extras"))
        {
        TxtExtras.setText(extras);
        }else
        {
        TxtExtras.setText(extras);
        }
        FormatDecimal();
   }
    public void Totales ()
    {
        String ValoresSumas [] = new String [4];
        String Textos [] = {"Piezas","Id","Codigo de barra","Producto","Precio"};
        DefaultTableModel.addRow(ValoresSumas);
        DefaultTableModel.addRow(ValoresSumas);
        DefaultTableModel.addRow(ValoresSumas);
        DefaultTableModel.addRow(Textos);
        int cantidad = 0, total = 0;
        String tipo = "" , modelo = "",numero = "";
        
        if (TablaNotaVenta.getRowCount() == 5)
        {
            cantidad += Integer.parseInt((String) TablaNotaVenta.getValueAt(0, 0));
            tipo += (String) TablaNotaVenta.getValueAt(0, 1);
            modelo += (String) TablaNotaVenta.getValueAt(0, 2);
            total += Integer.parseInt((String) TablaNotaVenta.getValueAt(0, 3));
            numero += (String) TablaNotaVenta.getValueAt(0, 4);         
        }else
        {
            tipo = "Varios";
            modelo = "Varios";
            numero = "Varios";         
            
            for (int i = 0 ; i < TablaNotaVenta.getRowCount() -1; i ++)
            {
                if (TablaNotaVenta.getValueAt(i,0) != null)
                {
                    cantidad += Integer.parseInt((String)TablaNotaVenta.getValueAt(i,0));
                    total += Integer.parseInt((String)TablaNotaVenta.getValueAt(i,3)) * Integer.parseInt((String)TablaNotaVenta.getValueAt(i,0));
                }
            }
        }
        ValoresSumas [0] = String.valueOf(cantidad);
        ValoresSumas [1] = tipo;
        ValoresSumas [2] = modelo;
        ValoresSumas [3] = String.valueOf(total);
        ValoresSumas [4] = numero;
        DefaultTableModel.addRow(ValoresSumas);
    }

    private void UpdateStockDB() 
    {
        try {
            Clases.ConexionBD Coneccion = new Clases.ConexionBD();
            
            int x = TablaNotaVenta.getRowCount() -1;
            
            while (x >= 0)
            {
                int valor = 0;
                String sql = "select * from productos where id ='"+Integer.parseInt((String) TablaNotaVenta.getValueAt(x, 1))+"';";
                ResultSet  busca = Coneccion.Consulta(sql);
                while (busca.next())
                {
                        valor = busca.getInt(6);
                }
                int stock = valor - Integer.parseInt((String) TablaNotaVenta.getValueAt(x, 0));
                String sql1 = "update productos set stock = '"+stock+"' where id = '"+Integer.parseInt((String) TablaNotaVenta.getValueAt(x, 1))+"'";
                String addlog = "INSERT INTO `logs`(`producto`,`codigo`, `precio`, `piezas`, `hora` , `fecha`) VALUES ('"+TablaNotaVenta.getValueAt(x, 3)+"','"+TablaNotaVenta.getValueAt(x, 2)+"','"+TablaNotaVenta.getValueAt(x, 4)+"',"
                        + "'"+TablaNotaVenta.getValueAt(x, 0)+"','"+Hora()+"','"+fecha()+"')";
                
                Coneccion.ejecutar(sql1);    
                Coneccion.ejecutar(addlog);
                x --;
            }
        } catch (ClassNotFoundException | SQLException | InstantiationException | IllegalAccessException ex) {
            Logger.getLogger(SalesNormal.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        try {
            
            Clases.ConexionBD coneccion = new Clases.ConexionBD();
            
            String addlog = "INSERT INTO `logs`(`producto`,`codigo`, `precio`, `piezas`, `hora` , `fecha`) VALUES ('"+"EXTRAS"+"','"+"s/n"+"','"+TxtExtras.getText()+"',"
                        + "'"+"1"+"','"+Hora()+"','"+fecha()+"')";
            if (Double.parseDouble(TxtExtras.getText()) > 0)
            {
             coneccion.ejecutar(addlog);
            }
        } catch (ClassNotFoundException | SQLException | InstantiationException | IllegalAccessException ex) {
            Logger.getLogger(SalesNormal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }

    private void Print(String printName) throws PrintException 
    {
        int x = TablaNotaVenta.getRowCount() -1;
        String cadena = "\n"+datos.ReturnDateMay("nombre")+" \n ----------------------------- \n "
                + "RFC: "+ datos.ReturnDateMay("rfc") +" \n Direccion: \n "+ datos.ReturnDateMay("direccion") +"\n Telefono: "+ datos.ReturnDateMay("telefono") +"\n Fecha: "+fecha()+"\n Hora: "+Hora()+"\n -----------------------------\n";
        
        while (x >= 0)
        {
            cadena +=  "(" + TablaNotaVenta.getValueAt(x, 0) + ")" + TablaNotaVenta.getValueAt(x, 3) + ". $" +TablaNotaVenta.getValueAt(x, 4) + "\n";
            x --;
        }
        
        cadena += "(+)EXTRAS: $ " + TxtExtras.getText() + "\n\nTotal: $" + TxtTotal.getText()+" \nPaga con: "+ TxtPagaCon.getText() +"\nCambio: "+ TxtCambio.getText() +"\n-----------------------------\n"+datos.ReturnDateMay("msg1")+"\n"+datos.ReturnDateMay("msg2")+"\n       **"+datos.ReturnDateMay("msg3")+"** \n ---------------------------- \n   Sistemas de ventas y mas\n     www.cyberchoapas.com \n\n\n ----------------------------\n";
        
        //
        
    //aqui creo un arreglo para obtener todas las impresoras que tengo instaladas
    PrintService[] services = PrintServiceLookup.lookupPrintServices(null, null );     
 
    //aqui le digo con que impresora voy a trabajar           
    HashAttributeSet aset = new HashAttributeSet();
    aset.add(new PrinterName(printName, null));
    services = PrintServiceLookup.lookupPrintServices(null, aset);
 
    // convertimos el comando a bytes
    byte[] by = cadena.getBytes();
    DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
    Doc doc = new SimpleDoc(by, flavor, null);
 
    // creamos el printjob
    DocPrintJob job = services[0].createPrintJob();
    // imprimimos
    job.print(doc, null);
        
        //
        
    }
    
    private void PrintOnlyTicket(String printName) throws PrintException 
    {
        int x = TablaNotaVenta.getRowCount() -1;
        String cadena = "\n"+datos.ReturnDateMay("nombre")+" \n ----------------------------- \n "
                + "RFC: "+ datos.ReturnDateMay("rfc") +" \n Direccion: \n "+ datos.ReturnDateMay("direccion") +"\n Telefono: "+ datos.ReturnDateMay("telefono") +"\n Fecha: "+fecha()+"\n Hora: "+Hora()+"\n -----------------------------\n";    
        
        while (x >= 0)
        {
            cadena +=  "(" + TablaNotaVenta.getValueAt(x, 0) + ")" + TablaNotaVenta.getValueAt(x, 3) + ". $" +TablaNotaVenta.getValueAt(x, 4) + "\n";
            x --;
        }
        
        cadena += "(+)EXTRAS: $ " + TxtExtras.getText() + "\n\nTotal: $" + TxtTotal.getText()+" \nPaga con: "+ TxtPagaCon.getText() +"\nCambio: "+ TxtCambio.getText() +"\n-----------------------------\n"+datos.ReturnDateMay("msg1")+"\n"+datos.ReturnDateMay("msg2")+"\n       **"+datos.ReturnDateMay("msg3")+"** \n ---------------------------- \n   Sistemas de ventas y mas\n     www.cyberchoapas.com \n\n\n ----------------------------\n";
        
        //
        
    //aqui creo un arreglo para obtener todas las impresoras que tengo instaladas
    PrintService[] services = PrintServiceLookup.lookupPrintServices(null, null );     
 
    //aqui le digo con que impresora voy a trabajar           
    HashAttributeSet aset = new HashAttributeSet();
    aset.add(new PrinterName(printName, null));
    services = PrintServiceLookup.lookupPrintServices(null, aset);
 
    // convertimos el comando a bytes
    byte[] by = cadena.getBytes();
    DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
    Doc doc = new SimpleDoc(by, flavor, null);
 
    // creamos el printjob
    DocPrintJob job = services[0].createPrintJob();
    // imprimimos
    job.print(doc, null);
        
        //
        
    }
    
    private void OpenBox(String printName) throws PrintException 
    {
        String cadena = ""+(char)27+(char)112+(char)0+(char)10+(char)100;
        
    //aqui creo un arreglo para obtener todas las impresoras que tengo instaladas
    PrintService[] services = PrintServiceLookup.lookupPrintServices(null, null );     
 
    //aqui le digo con que impresora voy a trabajar           
    HashAttributeSet aset = new HashAttributeSet();
    aset.add(new PrinterName(printName, null));
    services = PrintServiceLookup.lookupPrintServices(null, aset);
 
    // convertimos el comando a bytes
    byte[] by = cadena.getBytes();
    DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
    Doc doc = new SimpleDoc(by, flavor, null);
 
    // creamos el printjob
    DocPrintJob job = services[0].createPrintJob();
    // imprimimos
    job.print(doc, null);
        
        //
        
    }
    
    
    private void updateVentabd(int piezas , int id) {
      
        try {
        
            Clases.ConexionBD coneccion = new Clases.ConexionBD();
            
            String Busqueda = "select * from productos where id ='"+id+"';";
            ResultSet BusquedaR = coneccion.Consulta(Busqueda);
            
            while (BusquedaR.next())
            {
                if (id == BusquedaR.getInt(1))
                {
                Clases.ConexionBD coneccion0 = new Clases.ConexionBD();
                int suma = BusquedaR.getInt(7) + piezas;     
                String update = "update productos set vendidos = '"+suma+"' where id = '"+id+"'";  
                coneccion0.ejecutar(update);
                }
            }
        
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SalesNormal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(SalesNormal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(SalesNormal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(SalesNormal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    private void RemoveProduct ()
    {
        int i = TablaNotaVenta.getSelectedRow();
        
        if (i == -1 )
        {
        JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Seleccione el articulo que desea remover");
        }else
        {
            
                if (Integer.parseInt((String)TablaNotaVenta.getValueAt(i, 0)) > 1)
                {
                TablaNotaVenta.setValueAt(String.valueOf(Integer.parseInt((String) TablaNotaVenta.getValueAt(i, 0)) - 1), i, 0);
                TxtConsumo.setText(String.valueOf(Double.parseDouble(TxtConsumo.getText()) - Double.parseDouble((String) TablaNotaVenta.getValueAt(i, 4))));
                TxtTotal.setText(TxtConsumo.getText());
                TxtCambio.setText(String.valueOf(Double.parseDouble(TxtCambio.getText()) + Double.parseDouble((String) TablaNotaVenta.getValueAt(i, 4))));
                FormatDecimal();                
                        }else
                {
                    if (Integer.parseInt((String)TablaNotaVenta.getValueAt(i, 0)) == 1)
                    {
                        DefaultTableModel tabla = (DefaultTableModel) TablaNotaVenta.getModel();
                        TxtConsumo.setText(String.valueOf(Double.parseDouble(TxtConsumo.getText()) - Double.parseDouble((String)TablaNotaVenta.getValueAt(i, 4))));
                        tabla.removeRow(i);
                        Sumatoria();
                        FormatDecimal();
                    }
                }

              
        }
    }

    private void FormatDecimal() 
    {
        DecimalFormatSymbols simbolos = new DecimalFormatSymbols();
        simbolos.setDecimalSeparator('.');
        DecimalFormat formato = new DecimalFormat("0.00",simbolos);
        
        TxtCambio.setText(formato.format(Double.parseDouble(TxtCambio.getText())));
        TxtConsumo.setText(formato.format(Double.parseDouble(TxtConsumo.getText())));
        TxtExtras.setText(formato.format(Double.parseDouble(TxtExtras.getText())));
        TxtPagaCon.setText(formato.format(Double.parseDouble(TxtPagaCon.getText())));
        TxtTotal.setText(formato.format(Double.parseDouble(TxtTotal.getText())));
    }
    
    private void Sumatoria()
    {
        TxtTotal.setText(String.valueOf( Double.parseDouble(TxtConsumo.getText()) + Double.parseDouble(TxtExtras.getText()) ));
        TxtCambio.setText(String.valueOf(Double.parseDouble(TxtPagaCon.getText()) - Double.parseDouble(TxtTotal.getText())));
    }
}

    
