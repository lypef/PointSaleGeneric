/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package JDesktopPane;

import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lypef_000
 */
public class Sales extends javax.swing.JInternalFrame {

    /**
     * Creates new form Ventas
     */
        Calendar fecha = new GregorianCalendar ();
        String dia = Integer.toString(fecha.get(Calendar.DATE));
        //String mes = Integer.toString(fecha.get(Calendar.MONTH));
        int a = fecha.get(Calendar.MONTH);
        int b = a+1;
        String mes = Integer.toString(b);
        String año = Integer.toString(fecha.get(Calendar.YEAR));
        String hora = Integer.toString(fecha.get(Calendar.HOUR));
        String minutos = Integer.toString(fecha.get(Calendar.MINUTE));
        String segundos = Integer.toString(fecha.get(Calendar.SECOND));
        String ap = Integer.toString(fecha.get(Calendar.AM_PM));
        String NivelDeUsuario,UsuarioDeTrabajador;
        int j ;
        Clases.ReturnDate datos = new Clases.ReturnDate();

    public Sales () {
        initComponents();
        setTitle("VENTAS - " + datos.ReturnDateMay("nombre"));
        DatosComboBoxTipo ();
        DateSearchTable ();
        DateSearchTableVenta ();
        Fecha.setText(dia +" de  " +NombreMes() +" de "+ año);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton6 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaBusqueda = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaVenta = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        Fecha = new javax.swing.JLabel();
        UsuarioNombreJtextField = new javax.swing.JLabel();
        TipoDeVenta = new javax.swing.JComboBox();
        BtnSearchProduct = new javax.swing.JButton();
        TxtBarCode = new javax.swing.JTextField();
        ActionSearch = new javax.swing.JButton();
        BtnTotal = new javax.swing.JButton();
        TxtExtras = new javax.swing.JTextField();
        BtnVer = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Exit-Exit.png"))); // NOI18N
        jButton6.setText("Salir");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Cancel.png"))); // NOI18N
        jButton2.setText("Cancelar venta");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Add.png"))); // NOI18N
        jButton3.setText("Agregar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("Vendedor :");

        TablaBusqueda.setFont(TablaBusqueda.getFont().deriveFont(TablaBusqueda.getFont().getSize()+2f));
        TablaBusqueda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(TablaBusqueda);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Remove.png"))); // NOI18N
        jButton4.setText("Quitar producto");
        jButton4.setHideActionText(true);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        TablaVenta.setFont(TablaVenta.getFont().deriveFont(TablaVenta.getFont().getSize()+2f));
        TablaVenta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(TablaVenta);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Dollar.png"))); // NOI18N
        jButton5.setText("Cobrar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        Fecha.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        Fecha.setForeground(new java.awt.Color(255, 0, 0));
        Fecha.setText("Fecha");

        UsuarioNombreJtextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        UsuarioNombreJtextField.setForeground(new java.awt.Color(255, 0, 0));
        UsuarioNombreJtextField.setText("Name_trabajador");

        TipoDeVenta.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Automatico" }));
        TipoDeVenta.setEnabled(false);

        BtnSearchProduct.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/keyboard.png"))); // NOI18N
        BtnSearchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSearchProductActionPerformed(evt);
            }
        });

        TxtBarCode.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        TxtBarCode.setForeground(new java.awt.Color(204, 204, 204));
        TxtBarCode.setText("// CODIGO");
        TxtBarCode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TxtBarCodeMouseClicked(evt);
            }
        });
        TxtBarCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtBarCodeKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TxtBarCodeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtBarCodeKeyReleased(evt);
            }
        });

        ActionSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Search.png"))); // NOI18N
        ActionSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionSearchActionPerformed(evt);
            }
        });

        BtnTotal.setFont(new java.awt.Font("Cantarell", 1, 24)); // NOI18N
        BtnTotal.setForeground(new java.awt.Color(255, 0, 3));
        BtnTotal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Dollar.png"))); // NOI18N
        BtnTotal.setText("0.0");
        BtnTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnTotalActionPerformed(evt);
            }
        });

        TxtExtras.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        TxtExtras.setForeground(new java.awt.Color(255, 0, 0));
        TxtExtras.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TxtExtras.setText("0.0");
        TxtExtras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TxtExtrasMouseClicked(evt);
            }
        });
        TxtExtras.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtExtrasKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TxtExtrasKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtExtrasKeyReleased(evt);
            }
        });

        BtnVer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Search.png"))); // NOI18N
        BtnVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnVerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel3)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(UsuarioNombreJtextField, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addComponent(TipoDeVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(TxtBarCode, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ActionSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnSearchProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jButton3)
                                .addGap(288, 288, 288)
                                .addComponent(BtnVer, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(65, 65, 65)
                                .addComponent(TxtExtras, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BtnTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(294, 294, 294)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(UsuarioNombreJtextField)
                        .addGap(6, 6, 6)
                        .addComponent(Fecha))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(TipoDeVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(TxtBarCode, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ActionSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnSearchProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(7, 7, 7)
                                    .addComponent(jButton3))
                                .addComponent(BtnTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(2, 2, 2))
                        .addComponent(BtnVer, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(TxtExtras, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (JOptionPane.showInternalConfirmDialog(Desktop.Escritorio,"Esta seguro que desea cancelar la venta","Cancelar venta.",0) == 0)
        {
        CancelSale();
        DateSearchTable();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int i = TablaBusqueda.getSelectedRow();
        if (i == -1)
        {
        JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Seleccione al menos un producto para su venta");
        }else
        {
            if ("S-E".equals((String) TablaBusqueda.getValueAt(i, 5)) || Integer.parseInt((String) TablaBusqueda.getValueAt(i, 5)) <= 0)
            {
            JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Ya no hay mas producto que vender.");
            }else
            {
            RemoveStore(i);    
            AddSale(i);
            updatetotal();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        RemoverProductoEnVenta();
        updatetotal();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        updatetotal();
        if (Double.parseDouble(BtnTotal.getText()) > 0 )
        {
            VentaNormal();        
        }else
        {
        JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"AUN NO EXISTEN CONTENIDOS PARA VENDER.");
        }
        
    }//GEN-LAST:event_jButton5ActionPerformed
    private void BtnSearchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSearchProductActionPerformed
        
        SearchForProduct();
        
    }//GEN-LAST:event_BtnSearchProductActionPerformed

    private void ActionSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActionSearchActionPerformed
        DateSearchTable ();
        if (TipoDeVenta.getSelectedItem().equals("Automatico"))
        {
                SearchAutomatic(TxtBarCode.getText());
        }else
        {
            if (!TxtBarCode.getText().equalsIgnoreCase("// CODIGO"))
            {
                SearchForModel();
            }else
            {
                JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Ingrese un codigo de barra"); 
            }
        }
    }//GEN-LAST:event_ActionSearchActionPerformed

    private void TxtBarCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtBarCodeKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtBarCodeKeyReleased

    private void TxtBarCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtBarCodeKeyPressed
        if (evt.getKeyCode()== KeyEvent.VK_ENTER)
        {
            ActionSearch.doClick();
        }
    }//GEN-LAST:event_TxtBarCodeKeyPressed

    private void TxtBarCodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtBarCodeKeyTyped

    }//GEN-LAST:event_TxtBarCodeKeyTyped

    private void TxtBarCodeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TxtBarCodeMouseClicked
        TxtBarCode.setText("");
    }//GEN-LAST:event_TxtBarCodeMouseClicked

    private void BtnTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnTotalActionPerformed
        updatetotal();
    }//GEN-LAST:event_BtnTotalActionPerformed

    private void TxtExtrasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TxtExtrasMouseClicked
        TxtExtras.getText().replace(" ","");
        if ("0.0".equals(TxtExtras.getText()))
        {
            TxtExtras.setText("");
        }
    }//GEN-LAST:event_TxtExtrasMouseClicked

    private void TxtExtrasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtExtrasKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtExtrasKeyTyped

    private void TxtExtrasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtExtrasKeyPressed
        if (evt.getKeyCode()== KeyEvent.VK_ENTER)
        {
            BtnTotal.doClick();
        }        
    }//GEN-LAST:event_TxtExtrasKeyPressed

    private void TxtExtrasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtExtrasKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtExtrasKeyReleased

    private void BtnVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnVerActionPerformed
    int x = TablaBusqueda.getSelectedRow();
    if (x != -1)
    {
    JOptionPane.showInternalMessageDialog(Desktop.Escritorio,
            "Producto: " + TablaBusqueda.getValueAt(x, 1)
           +"\nDescripcion: " + TablaBusqueda.getValueAt(x, 2)
           +"\nCodigo de barra: " + TablaBusqueda.getValueAt(x, 3)
           +"\nPrecio: $" + TablaBusqueda.getValueAt(x, 4) + " M/N"
           //+"\nStock: " + TablaBusqueda.getValueAt(x, 5)
            );
    }else
    {
        JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"No ha seleccionado ningun producto");
    }
    }//GEN-LAST:event_BtnVerActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ActionSearch;
    private javax.swing.JButton BtnSearchProduct;
    private javax.swing.JButton BtnTotal;
    private javax.swing.JButton BtnVer;
    private javax.swing.JLabel Fecha;
    private javax.swing.JTable TablaBusqueda;
    private javax.swing.JTable TablaVenta;
    private javax.swing.JComboBox TipoDeVenta;
    private javax.swing.JTextField TxtBarCode;
    private javax.swing.JTextField TxtExtras;
    private javax.swing.JLabel UsuarioNombreJtextField;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
private void Disminuye (int i)
    {
    String y = (String) TablaBusqueda.getValueAt(i, 7);
    
    if (!"S-E".equalsIgnoreCase(y))
    {
        int CantidasDisminuir = Integer.parseInt(y);
        if (CantidasDisminuir <1 )
        {
        TablaBusqueda.setValueAt("S-E", i, 7);
        }else
        {
        CantidasDisminuir --;
        TablaBusqueda.setValueAt(String.valueOf(CantidasDisminuir), i, 7);
        String Modelo = (String) TablaBusqueda.getValueAt(i,5);
        String Descripcion =(String)TablaBusqueda.getValueAt(i,9);
        String Numeracion = (String)TablaBusqueda.getValueAt(i,8);
        int Precio = Integer.parseInt((String) TablaBusqueda.getValueAt(i,6));
        String a = BtnTotal.getText();
        double b = Double.parseDouble(a);
        double Operacion = Precio + b;
        BtnTotal.setText(String.valueOf(Math.rint(Operacion)));
        DefaultTableModel temp = (DefaultTableModel) 
        TablaVenta.getModel();
        Object nuevo[]= {temp.getRowCount()+1,"",""};
        temp.addRow(nuevo);
        
        TablaVenta.setValueAt(Modelo, j, 1);
        TablaVenta.setValueAt(Descripcion, j, 2);
        TablaVenta.setValueAt(Numeracion, j, 3);
        TablaVenta.setValueAt(Math.rint(Precio), j, 4);
        j++;//Aumenta el contador
        if (CantidasDisminuir  == 0 )
        {
        TablaBusqueda.setValueAt("S-E", i, 0);
        }
        }
    }else {
    JOptionPane.showMessageDialog(null,"Ya no tenemos mas calzado del modelo "+ TablaBusqueda.getValueAt(i, 5)
            +" en almacen");
    }
    }
public void InsertaNombre (String NivelDeUsuario0 , String UsuarioDeTrabajador0)
{
    NivelDeUsuario = NivelDeUsuario0;
    UsuarioDeTrabajador = UsuarioDeTrabajador0;
    UsuarioNombreJtextField.setText(UsuarioDeTrabajador);
}
private String NombreMes ()
{
    int Mes = Integer.parseInt(mes);
    String Mesfinal = "";
    
    if(Mes == 1)
    {
    Mesfinal = "Enero";    
    }
    if(Mes == 2)
    {
    Mesfinal = "Febrero";    
    }
    if(Mes == 3)
    {
    Mesfinal = "Marzo";    
    }
    if(Mes == 4)
    {
    Mesfinal = "Abril";    
    }
    if(Mes == 5)
    {
    Mesfinal = "Mayo";    
    }
    if(Mes == 6)
    {
    Mesfinal = "Junio";    
    }
    if(Mes == 7)
    {
    Mesfinal = "Julio";    
    }
    if(Mes == 8)
    {
    Mesfinal = "Agosto";    
    }
    if(Mes == 9)
    {
    Mesfinal = "Septiembre";    
    }
    if(Mes == 10)
    {
    Mesfinal = "Octubre";    
    }
    if(Mes == 11)
    {
    Mesfinal = "Noviembre";    
    }
    if(Mes == 12)
    {
    Mesfinal = "Diciembre";    
    }
    return Mesfinal;
}
    private void DatosComboBoxTipo ()
    {
            //TipoDeVenta.addItem("Automatico");
            TipoDeVenta.addItem("Buscar");
                   
    }
    private void SearchForModel() {
            if (!TxtBarCode.getText().equalsIgnoreCase("// CODIGO"))
        {
                try {
            Clases.ConexionBD Coneccion = new Clases.ConexionBD();
            String sql = "select * from calzado";
            ResultSet rs = Coneccion.Consulta(sql);
            DefaultTableModel DefaultTableModel = new DefaultTableModel(){
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
            };
            
            String ValoresTabla [] = {"Id","Producto","Descripcion","Codigo de barra","Precio","Stock"};
            DefaultTableModel.setColumnIdentifiers(ValoresTabla);
            TablaBusqueda.setModel(DefaultTableModel);
            String valores [] = new String [6];
            while (rs.next())
            {
            if (rs.getString(4).equalsIgnoreCase(TxtBarCode.getText()))
            {
                valores [0] = rs.getString(1);
                valores [1] = rs.getString(2);
                valores [2] = rs.getString(3); 
                valores [3] = rs.getString(4);
                valores [4] = rs.getString(5);
                valores [5] = rs.getString(6);
                DefaultTableModel.addRow(valores);
            }
            }
            TxtBarCode.setText("");
            if (TablaBusqueda.getRowCount() == 0)
            {
            JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"El modelo no ah sido encontrado");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        }
        }else
        {
        JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Ingrese un modelo a buscar");
        }
        if (TablaBusqueda.getRowCount() <= 0)
        {
        JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"No se encontraron filtros");
        }
    }

    public void DateSearchTable() {
            try {
                Clases.ConexionBD Coneccion = new Clases.ConexionBD();
                String sql = "select * from productos";
                ResultSet rs = Coneccion.Consulta(sql);
                DefaultTableModel DefaultTableModel = new DefaultTableModel(){
                    public boolean isCellEditable(int rowIndex,int columnIndex){return false;}
                };
                
                String ValoresTabla [] = {"Id","Producto","Descripcion","Codigo de barra","Precio","Stock"};
                DefaultTableModel.setColumnIdentifiers(ValoresTabla);
                TablaBusqueda.setModel(DefaultTableModel);
                TablaBusqueda.getColumnModel().getColumn(0).setPreferredWidth(1);
                TablaBusqueda.getColumnModel().getColumn(1).setPreferredWidth(200);
                TablaBusqueda.getColumnModel().getColumn(2).setPreferredWidth(470);
                TablaBusqueda.getColumnModel().getColumn(3).setPreferredWidth(130);
                TablaBusqueda.getColumnModel().getColumn(4).setPreferredWidth(10);
                TablaBusqueda.getColumnModel().getColumn(5).setPreferredWidth(10);
                String valores [] = new String [6];
                while (rs.next())
                {
                        if (rs.getInt(6) != 0)
                        {
                            valores [0] = rs.getString(1);
                            valores [1] = rs.getString(2);
                            valores [2] = rs.getString(3);
                            valores [3] = rs.getString(4);
                            valores [4] = rs.getString(5);
                            valores [5] = rs.getString(6);
                            DefaultTableModel.addRow(valores);
                        }
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Sales.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Sales.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(Sales.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(Sales.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    private void DateSearchTableVenta() {
                DefaultTableModel DefaultTableModel = new DefaultTableModel(){
                    public boolean isCellEditable(int rowIndex,int columnIndex){return false;}
                };
                String ValoresTabla [] = {"Piezas","Id","Codigo de barra","Producto","Precio"};
                DefaultTableModel.setColumnIdentifiers(ValoresTabla);
                TablaVenta.setModel(DefaultTableModel);
                
    }
    
    private void CancelSale() {
        BtnTotal.setText("0.0");
        TxtBarCode.setText("// CODIGO");
        TxtExtras.setText("0.0");
        DefaultTableModel Vt = (DefaultTableModel) TablaVenta.getModel();
        DefaultTableModel Bt = (DefaultTableModel) TablaBusqueda.getModel();
        int x = TablaVenta.getRowCount() -1 ;
        int xx = TablaBusqueda.getRowCount() -1 ;
        while(x>=0){
            Vt.removeRow(x);
            x--;
            j --;
        }
        while (xx>=0){
            Bt.removeRow(xx);
            xx--;
        }

    }
    private void MuestraTipos ()
    {
    {
        try {
            Clases.ConexionBD ConexionBD = new Clases.ConexionBD();
            DefaultTableModel DefaultTableModel = new DefaultTableModel(){
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
            };
            
            String ValoresTabla [] = {"Id","Id provedor","Tipo","Color","Material","Modelo","Precio","Existencia","Numero","Descripcion"};
            DefaultTableModel.setColumnIdentifiers(ValoresTabla);
            TablaBusqueda.setModel(DefaultTableModel);
            String sql = "select * from calzado";
            ResultSet rs = ConexionBD.Consulta(sql);
            
            String valores [] = new String [10];
            
            while (rs.next()){
                if (rs.getString(3).equalsIgnoreCase((String) TipoDeVenta.getSelectedItem()))
                {
                        if (rs.getInt(8) != 0)
                        {
                            valores [0] = rs.getString(1);
                            valores [1] = rs.getString(2);
                            valores [2] = rs.getString(3);
                            valores [3] = rs.getString(4);
                            valores [4] = rs.getString(5);
                            valores [5] = rs.getString(6);
                            valores [6] = rs.getString(7);
                            valores [7] = rs.getString(8);
                            valores [8] = rs.getString(9);
                            valores [9] = rs.getString(10);
                            DefaultTableModel.addRow(valores);
                        }
                }
            
            }
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        }
      }
    
    }

    private void AddSale(int i) {
    boolean Existe = false ; 
    
    for (int a = 0 ; a <TablaVenta.getRowCount(); a ++)
    {
        if (TablaBusqueda.getValueAt(i, 0).equals(TablaVenta.getValueAt(a, 1)))
        {
        TablaVenta.setValueAt(String.valueOf(Integer.parseInt((String) TablaVenta.getValueAt(a, 0)) + 1), a, 0);
        BtnTotal.setText(String.valueOf(Double.parseDouble((String) TablaBusqueda.getValueAt(i, 4)) + Double.parseDouble(BtnTotal.getText())));
        Existe = true;
        if ( Integer.parseInt((String)TablaBusqueda.getValueAt(i, 5)) <= 0)
        {
        TablaBusqueda.setValueAt("S-E", i, 5);
        }
        }
    }
    if (Existe == false)
    {
            DefaultTableModel temp = (DefaultTableModel) 
            TablaVenta.getModel();
            String Valores [] = new String [5];
            Valores [0] = String.valueOf("1");
            Valores [1] = (String) TablaBusqueda.getValueAt(i, 0);
            Valores [3] = (String) TablaBusqueda.getValueAt(i, 1);
            Valores [2] = (String) TablaBusqueda.getValueAt(i, 3);
            Valores [4] = (String) TablaBusqueda.getValueAt(i, 4);
           
            temp.addRow(Valores);
            BtnTotal.setText(String.valueOf(Double.parseDouble(Valores[4]) + Double.parseDouble(BtnTotal.getText())));
            if ( Integer.parseInt((String)TablaBusqueda.getValueAt(i, 5)) <= 0)
            {
            TablaBusqueda.setValueAt("S-E", i, 5);
            }
            j++;
    }    
    }

    private void RemoveStore(int i) {
                TablaBusqueda.setValueAt(String.valueOf(Integer.parseInt((String)TablaBusqueda.getValueAt(i, 5)) - 1),i, 5);
    }

    private void RemoverProductoEnVenta() {
        int i = TablaVenta.getSelectedRow();
        if (i == -1 )
        {
        JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Seleccione el articulo que desea remover");
        }else
        {
            
                if (Integer.parseInt((String)TablaVenta.getValueAt(i, 0)) > 1)
                {
                TablaVenta.setValueAt(String.valueOf(Integer.parseInt((String) TablaVenta.getValueAt(i, 0)) - 1), i, 0);
                BtnTotal.setText(String.valueOf(Double.parseDouble(BtnTotal.getText()) - Integer.parseInt((String) TablaVenta.getValueAt(i, 0)) * Double.parseDouble((String)TablaVenta.getValueAt(i, 4))));
                 
                for (int a = 0 ; a < TablaBusqueda.getRowCount() ; a++)
                    {
                        if (TablaBusqueda.getValueAt(a, 0).equals(TablaVenta.getValueAt(i, 1)))
                      {
                                    
                        if ("S-E".equals((String) TablaBusqueda.getValueAt(a, 5)))
                        {
                        TablaBusqueda.setValueAt("1", a, 5);
                        }else
                        {
                        TablaBusqueda.setValueAt(String.valueOf(Integer.parseInt((String) TablaBusqueda.getValueAt(a, 5)) + 1), a, 5);
                        }
                                    
                        }
                    }
                        
                }else
                {
                    if (Integer.parseInt((String)TablaVenta.getValueAt(i, 0)) == 1)
                    {
                        DefaultTableModel tabla = (DefaultTableModel) TablaVenta.getModel();
                        BtnTotal.setText(String.valueOf(Double.parseDouble(BtnTotal.getText()) - Double.parseDouble((String)TablaVenta.getValueAt(i, 4))));
                            
                            for (int a = 0 ; a < TablaBusqueda.getRowCount() ; a++)
                            {

                                if ("S-E".equals((String) TablaBusqueda.getValueAt(a, 5)))
                                {
                                    TablaBusqueda.setValueAt("1", a, 5);
                                }
                                else
                                {
                                    TablaBusqueda.setValueAt(String.valueOf(Integer.parseInt((String) TablaBusqueda.getValueAt(a, 5)) + 1), a, 5);
                                }    
                            }
                                tabla.removeRow(i);
                                j--;
                    }
                }

              
        }
        
    }

    private void VentaNormal() {
        
        
        String pago = String.valueOf(JOptionPane.showInternalInputDialog(Desktop.Escritorio,"¿Con cuanto paga el cliente ? Monto: " + BtnTotal.getText()));
        
        String pagotmp = pago.replace(" ","");
        if (pagotmp.equals(""))
        {
            pagotmp = BtnTotal.getText();
        }
        double MonDePago = Double.parseDouble(pagotmp.replace(",", "."));
        
        if (MonDePago >= Double.parseDouble(BtnTotal.getText()))
        {
            SalesNormal SalesNormal = new SalesNormal ();
            for (int i = 0 ; i < TablaVenta.getRowCount() ; i++)
            {
                SalesNormal.NotaDeVenta(
                        Integer.parseInt((String) TablaVenta.getValueAt(i, 0)),
                        Integer.parseInt((String)TablaVenta.getValueAt(i, 1)),
                        (String)TablaVenta.getValueAt(i, 2),
                        (String)TablaVenta.getValueAt(i, 3),
                        Double.parseDouble((String)TablaVenta.getValueAt(i, 4)));               
            }
            //
                TxtExtras.setText(TxtExtras.getText().replace(" ", ""));
                TxtExtras.setText(TxtExtras.getText().replace(",", "."));
                TxtExtras.setText(TxtExtras.getText().replace("+", ","));
                TxtExtras.setText(TxtExtras.getText().replace("++", ","));
                TxtExtras.setText(TxtExtras.getText().replace("+++", ","));
                TxtExtras.setText(TxtExtras.getText().replace("++++", ","));
                
                String[] numerosComoArray = TxtExtras.getText().split(",");
                double vartmp = 0;
                for (int i = 0; i < numerosComoArray.length; i++) {
                
                    vartmp +=  Double.parseDouble(numerosComoArray[i]);
                }
            //
            SalesNormal.Montos(Double.parseDouble(BtnTotal.getText()), String.valueOf(vartmp) ,MonDePago);
            CancelSale();
            DateSearchTable();
            Desktop.Escritorio.add(SalesNormal);
            SalesNormal.setLocation(Desktop.Escritorio.getWidth() / 2 - SalesNormal.getWidth() / 2,Desktop.Escritorio.getHeight() / 2 - SalesNormal.getHeight() / 2);
            SalesNormal.show();    
         }else
        {
            JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Verifique la cantidad con la que se paga.");
        }
            
            
    }

    

    private void MuestraAll() {
    
    try {
            Clases.ConexionBD ConexionBD = new Clases.ConexionBD();
            DefaultTableModel DefaultTableModel = new DefaultTableModel(){
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
            };
            
            String ValoresTabla [] = {"Id","Id provedor","Tipo","Color","Material","Modelo","Precio","Existencia","Numero","Descripcion"};
            DefaultTableModel.setColumnIdentifiers(ValoresTabla);
            TablaBusqueda.setModel(DefaultTableModel);
            String sql = "select * from calzado";
            ResultSet rs = ConexionBD.Consulta(sql);
            
            String valores [] = new String [10];
            
            while (rs.next()){
                if (rs.getString(3).equalsIgnoreCase((String) TipoDeVenta.getSelectedItem()))
                {
                       
                            valores [0] = rs.getString(1);
                            valores [1] = rs.getString(2);
                            valores [2] = rs.getString(3);
                            valores [3] = rs.getString(4);
                            valores [4] = rs.getString(5);
                            valores [5] = rs.getString(6);
                            valores [6] = rs.getString(7);
                            valores [7] = rs.getString(8);
                            valores [8] = rs.getString(9);
                            valores [9] = rs.getString(10);
                            DefaultTableModel.addRow(valores);
                        
                }
            
            }
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Store.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void VentaDeArticulosBajamysql() 
    {
            try {
            
                Clases.ConexionBD coneccion = new Clases.ConexionBD();
                
                for (int i = 0 ; i < TablaVenta.getRowCount();i ++)
                {
                    int ValorSinvender = 1;
                    for (int j = 0 ; j < TablaBusqueda.getRowCount() ; j ++)
                    {
                        if (TablaVenta.getValueAt(i, 1).equals(TablaBusqueda.getValueAt(j, 0)))
                        {
                            if ("S-E".equalsIgnoreCase((String) TablaBusqueda.getValueAt(j, 5)))
                            {
                            ValorSinvender = 0;
                            }
                            }
                    }
                    if (ValorSinvender == 0)
                    {
                    String sql0 = "update calzado set stock = '"+ValorSinvender+"' where id = '"+Integer.parseInt((String) TablaVenta.getValueAt(i, 0))+"'";    
                    coneccion.ejecutar(sql0);
                    }else
                    {
                        int valor = 0;
                        String sql = "select * from calzado where id ='"+Integer.parseInt((String) TablaVenta.getValueAt(i, 0))+"';";
                        ResultSet  busca = coneccion.Consulta(sql);
                        while (busca.next())
                        {
                        valor = busca.getInt(6);
                        }
                        int calzadoexistencianuevo = valor - Integer.parseInt((String) TablaVenta.getValueAt(i, 0));
                        String sql1 = "update calzado set stock = '"+calzadoexistencianuevo+"' where id = '"+Integer.parseInt((String) TablaVenta.getValueAt(i, 0))+"'";
                        coneccion.ejecutar(sql1);
                    }
                    
                }
            
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Sales.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Sales.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(Sales.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(Sales.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
        private void FilterDetalle ()
        {

        if (TipoDeVenta.getSelectedItem().equals("TIPO"))
        {
        MuestraAll();
        }
        if (TablaBusqueda.getRowCount() <= 0)
        {
        JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"No se encontraron filtros");
        }
        }

    private void SearchAutomatic(String CodigoDeBarra) 
    {
    boolean encontro = false ; 
    
        for (int a = 0 ; a <TablaBusqueda.getRowCount(); a ++)
        {
        
            if (TablaBusqueda.getValueAt(a, 3).equals(CodigoDeBarra))
            {
                
                DefaultTableModel temp = (DefaultTableModel) 
                TablaVenta.getModel();
                String Valores [] = new String [5];
                Valores [0] = String.valueOf("1");
                Valores [1] = (String) TablaBusqueda.getValueAt(a, 0);
                Valores [3] = (String) TablaBusqueda.getValueAt(a, 1);
                Valores [2] = (String) TablaBusqueda.getValueAt(a, 3);
                Valores [4] = (String) TablaBusqueda.getValueAt(a, 4);
           
                temp.addRow(Valores);
                BtnTotal.setText(String.valueOf(Double.parseDouble(Valores[4]) + Double.parseDouble(BtnTotal.getText())));
                TxtBarCode.setText("");
                encontro = true;
            }
        }
        if (encontro == false)
        {
            JOptionPane.showInternalMessageDialog(this,"Producto no encontrado");
            TxtBarCode.setText("");
        }
    }

    private void updatetotal() 
    {
        int x = TablaVenta.getRowCount() -1;
        BtnTotal.setText("0.00");
        
        TxtExtras.setText(TxtExtras.getText().replace(" ", ""));
        if (TxtExtras.getText().equalsIgnoreCase(""))
        {
         TxtExtras.setText("0.0");
        }
        
        DecimalFormatSymbols simbolos = new DecimalFormatSymbols();
        simbolos.setDecimalSeparator('.');
        DecimalFormat formato = new DecimalFormat("0.00",simbolos);
        
        while ( x >= 0 ) 
        {
            double suma = Integer.parseInt((String) TablaVenta.getValueAt(x, 0)) * Double.parseDouble((String) TablaVenta.getValueAt(x, 4));
            double tmp = Double.parseDouble(BtnTotal.getText());
            double total = suma + tmp;
            BtnTotal.setText(String.valueOf(formato.format(total)));
            x --;
        }
        if (!TxtExtras.getText().equalsIgnoreCase("Extras"))
        {
            if (!TxtExtras.getText().isEmpty())
            {
                TxtExtras.setText(TxtExtras.getText().replace(" ", ""));
                TxtExtras.setText(TxtExtras.getText().replace(",", "."));
                TxtExtras.setText(TxtExtras.getText().replace("+", ","));
                TxtExtras.setText(TxtExtras.getText().replace("++", ","));
                TxtExtras.setText(TxtExtras.getText().replace("+++", ","));
                TxtExtras.setText(TxtExtras.getText().replace("++++", ","));
                
                String[] numerosComoArray = TxtExtras.getText().split(",");
                double vartmp = 0;
                for (int i = 0; i < numerosComoArray.length; i++) {
                
                    vartmp +=  Double.parseDouble(numerosComoArray[i]);
                }
                BtnTotal.setText(String.valueOf(formato.format(Double.parseDouble(BtnTotal.getText()) + vartmp) ));
                TxtExtras.setText(TxtExtras.getText().replace(",", "+"));
            }
          
        }
    }

    private void SearchForProduct() 
    {
    DateSearchTable ();
            try {
                Clases.ConexionBD Coneccion = new Clases.ConexionBD();
                String sql = "select * from productos where nombre like '%"+TxtBarCode.getText()+"%' or descripcion like '%"+TxtBarCode.getText()+"%'";
                ResultSet rs = Coneccion.Consulta(sql);
                DefaultTableModel DefaultTableModel = new DefaultTableModel(){
                    public boolean isCellEditable(int rowIndex,int columnIndex){return false;}
                };
                
                String ValoresTabla [] = {"Id","Producto","Descripcion","Codigo de barra","Precio","Stock"};
                DefaultTableModel.setColumnIdentifiers(ValoresTabla);
                TablaBusqueda.setModel(DefaultTableModel);
                TablaBusqueda.getColumnModel().getColumn(0).setPreferredWidth(1);
                TablaBusqueda.getColumnModel().getColumn(1).setPreferredWidth(200);
                TablaBusqueda.getColumnModel().getColumn(2).setPreferredWidth(470);
                TablaBusqueda.getColumnModel().getColumn(3).setPreferredWidth(130);
                TablaBusqueda.getColumnModel().getColumn(4).setPreferredWidth(10);
                TablaBusqueda.getColumnModel().getColumn(5).setPreferredWidth(10);
                String valores [] = new String [6];
                while (rs.next())
                {
                        if (rs.getInt(6) != 0)
                        {
                            valores [0] = rs.getString(1);
                            valores [1] = rs.getString(2);
                            valores [2] = rs.getString(3);
                            valores [3] = rs.getString(4);
                            valores [4] = rs.getString(5);
                            valores [5] = rs.getString(6);
                            DefaultTableModel.addRow(valores);
                        }
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Sales.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Sales.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(Sales.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(Sales.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    private void SearchForDescrip() 
    {
    DateSearchTable ();
            try {
                Clases.ConexionBD Coneccion = new Clases.ConexionBD();
                String sql = "select * from productos where descripcion like '%"+TxtBarCode.getText()+"%'";
                ResultSet rs = Coneccion.Consulta(sql);
                DefaultTableModel DefaultTableModel = new DefaultTableModel(){
                    public boolean isCellEditable(int rowIndex,int columnIndex){return false;}
                };
                
                String ValoresTabla [] = {"Id","Producto","Descripcion","Codigo de barra","Precio","Stock"};
                DefaultTableModel.setColumnIdentifiers(ValoresTabla);
                TablaBusqueda.setModel(DefaultTableModel);
                TablaBusqueda.getColumnModel().getColumn(0).setPreferredWidth(1);
                TablaBusqueda.getColumnModel().getColumn(1).setPreferredWidth(250);
                TablaBusqueda.getColumnModel().getColumn(2).setPreferredWidth(400);
                String valores [] = new String [6];
                while (rs.next())
                {
                        if (rs.getInt(6) != 0)
                        {
                            valores [0] = rs.getString(1);
                            valores [1] = rs.getString(2);
                            valores [2] = rs.getString(3);
                            valores [3] = rs.getString(4);
                            valores [4] = rs.getString(5);
                            valores [5] = rs.getString(6);
                            DefaultTableModel.addRow(valores);
                        }
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Sales.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Sales.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(Sales.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(Sales.class.getName()).log(Level.SEVERE, null, ex);
            }        
    }
}
