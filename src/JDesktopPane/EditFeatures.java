/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package JDesktopPane;

import Clases.ConexionBD;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 *
 * @author lypef_000
 */
public class EditFeatures extends javax.swing.JInternalFrame {
    int compara;
    String TipoUser,Turno,AuxTipo,AuxColor,AuxMaterial;
    int id = 1;
    /**
     * Creates new form AddStaff
     */
    public EditFeatures() {
        initComponents();
        setTitle("Agregar caracteristicas");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Tipo = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        Material = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        BotonCancelar = new javax.swing.JButton();
        BotonDarDeAlta = new javax.swing.JButton();
        BotonLimpiar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Color = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);

        jLabel12.setText("Color");

        jLabel1.setText("Tipo");

        BotonCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Cancel.png"))); // NOI18N
        BotonCancelar.setText("Cancelar");
        BotonCancelar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonCancelar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCancelarActionPerformed(evt);
            }
        });

        BotonDarDeAlta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Save.png"))); // NOI18N
        BotonDarDeAlta.setText("Guardar");
        BotonDarDeAlta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonDarDeAlta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonDarDeAlta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonDarDeAltaActionPerformed(evt);
            }
        });

        BotonLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Clean.png"))); // NOI18N
        BotonLimpiar.setText("Limpiar");
        BotonLimpiar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonLimpiar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonLimpiarActionPerformed(evt);
            }
        });

        jLabel3.setText("Material");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addComponent(Tipo, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel12)
                .addGap(25, 25, 25)
                .addComponent(Color, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel3)
                .addGap(12, 12, 12)
                .addComponent(Material, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(BotonLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(BotonDarDeAlta, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(BotonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(Tipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(Color, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(Material, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BotonLimpiar)
                    .addComponent(BotonDarDeAlta)
                    .addComponent(BotonCancelar)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCancelarActionPerformed
        Limpiar();
        dispose();   
    }//GEN-LAST:event_BotonCancelarActionPerformed

    private void BotonDarDeAltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonDarDeAltaActionPerformed
        Tipo.setText(Tipo.getText().toUpperCase());
        Color.setText(Color.getText().toUpperCase());
        Material.setText(Material.getText().toUpperCase());
        try {
            Clases.ConexionBD Coneccion = new Clases.ConexionBD();
            
            if (!Tipo.getText().equalsIgnoreCase("") && Color.getText().equalsIgnoreCase("") && Material.getText().equalsIgnoreCase(""))
            {
                UpdateTipo();
            }
            if (Tipo.getText().equalsIgnoreCase("") && !Color.getText().equalsIgnoreCase("") && Material.getText().equalsIgnoreCase(""))
            {
               UpdateColor();
            }
            if (Tipo.getText().equalsIgnoreCase("") && Color.getText().equalsIgnoreCase("") && !Material.getText().equalsIgnoreCase(""))
            {
            UpdateMaterial();
            }
            if (!Tipo.getText().equalsIgnoreCase("") && !Color.getText().equalsIgnoreCase("") && Material.getText().equalsIgnoreCase(""))
            {
            UpdateColor();
            UpdateTipo();
            }
            if (!Tipo.getText().equalsIgnoreCase("") && Color.getText().equalsIgnoreCase("") && !Material.getText().equalsIgnoreCase(""))
            {
            UpdateTipo();
            UpdateMaterial();
            }
            if (Tipo.getText().equalsIgnoreCase("") && !Color.getText().equalsIgnoreCase("") && !Material.getText().equalsIgnoreCase(""))
            {
            UpdateColor();
            UpdateMaterial();
            }
            if (!Tipo.getText().equalsIgnoreCase("") && !Color.getText().equalsIgnoreCase("") && !Material.getText().equalsIgnoreCase(""))
            {
            UpdateTipo();
            UpdateColor();
            UpdateMaterial();
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_BotonDarDeAltaActionPerformed

    private void BotonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonLimpiarActionPerformed
        Limpiar ();
    }//GEN-LAST:event_BotonLimpiarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonCancelar;
    private javax.swing.JButton BotonDarDeAlta;
    private javax.swing.JButton BotonLimpiar;
    private javax.swing.JTextField Color;
    private javax.swing.JTextField Material;
    private javax.swing.JTextField Tipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    // End of variables declaration//GEN-END:variables
    private void Limpiar () 
    {
    Tipo.setText("");
    Color.setText("");
    Material.setText("");
    }

    public void ValoresAeditar (String Tipo0 , String Color0 , String Material0)
    {
    Tipo.setText(Tipo0);
    Color.setText(Color0);
    Material.setText(Material0);
    }
    public void BlockTipo ()
    {
    Tipo.disable();
    }
    public void BlockColor ()
    {
    Color.disable();
    }
    public void BlockMaterial ()
    {
    Material.disable();
    }
    private boolean ComparaExistenciaTipo (String VarAux)
    {
        String Encontre = "";
        try {
            Clases.ConexionBD BD = new Clases.ConexionBD ();
            String sql = "select * from tipodecalzado where tipos ='"+VarAux+"';";
            ResultSet Ingresa = BD.Consulta(sql);
            
            while (Ingresa.next())
            {
                Encontre = Ingresa.getString(1);
            }
            

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (Encontre.equalsIgnoreCase(AuxTipo))
        {
        return true;
        }else
        {
        return false;
        }
        
    }
    private boolean ComparaExistenciaColor (String VarAux)
    {
        String Encontre = "";
        try {
            Clases.ConexionBD BD = new Clases.ConexionBD ();
            String sql = "select * from tipodecalzado where color ='"+VarAux+"';";
            ResultSet Ingresa = BD.Consulta(sql);
            
            while (Ingresa.next())
            {
                Encontre = Ingresa.getString(2);
            }
            

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (Encontre.equalsIgnoreCase(AuxColor))
        {
        return true;
        }else
        {
        return false;
        }
        
    }
    private boolean ComparaExistenciaMaterial (String VarAux)
    {
        String Encontre = "";
        try {
            Clases.ConexionBD BD = new Clases.ConexionBD ();
            String sql = "select * from tipodecalzado where material ='"+VarAux+"';";
            ResultSet Ingresa = BD.Consulta(sql);
            
            while (Ingresa.next())
            {
                Encontre = Ingresa.getString(3);
            }
            

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (Encontre.equalsIgnoreCase(AuxMaterial))
        {
        return true;
        }else
        {
        return false;
        }
        
    }

    private boolean ComparaExistenciaTipoSegunda ()
    {
        String Encontre = "";
        try {
            Clases.ConexionBD BD = new Clases.ConexionBD ();
            String sql = "select * from tipodecalzado where tipos ='"+Tipo.getText()+"';";
            ResultSet Ingresa = BD.Consulta(sql);
            
            while (Ingresa.next())
            {
                Encontre = Ingresa.getString(1);
            }
            

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (Encontre.equalsIgnoreCase(Tipo.getText()))
        {
        return false;
        }else
        {
        return true;
        }
        
    }
    private boolean ComparaExistenciaColorSegunda ()
    {
        String Encontre = "";
        try {
            Clases.ConexionBD BD = new Clases.ConexionBD ();
            String sql = "select * from tipodecalzado where color ='"+Color.getText()+"';";
            ResultSet Ingresa = BD.Consulta(sql);
            
            while (Ingresa.next())
            {
                Encontre = Ingresa.getString(2);
            }
            

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (Encontre.equalsIgnoreCase(Color.getText()))
        {
        return false;
        }else
        {
        return true;
        }
        
    }
    private boolean ComparaExistenciaMaterialSegunda ()
    {
        String Encontre = "";
        try {
            Clases.ConexionBD BD = new Clases.ConexionBD ();
            String sql = "select * from tipodecalzado where material ='"+Material.getText()+"';";
            ResultSet Ingresa = BD.Consulta(sql);
            
            while (Ingresa.next())
            {
                Encontre = Ingresa.getString(3);
            }
            

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (Encontre.equalsIgnoreCase(Material.getText()))
        {
        return false;
        }else
        {
        return true;
        }
        
    }
    private void UpdateTipo ()
    {
        try {
            Clases.ConexionBD Coneccion = new Clases.ConexionBD();
            
            if (ComparaExistenciaTipo(AuxTipo) == true)
            {
                if (ComparaExistenciaTipoSegunda()== true)
                {
                String InsertaTipoNuevo = "update tipodecalzado set tipos = '"+Tipo.getText()+"'  where tipos = '"+AuxTipo+"'";
                Coneccion.ejecutar(InsertaTipoNuevo);
                JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Correcto");
                dispose();
                }
                else
                {
                JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"EL tipo ya existe , no es necesario que lo agregue");
                String InsertaTipoNuevo = "update tipodecalzado set tipos = '"+""+"'  where tipos = '"+AuxTipo+"'";
                Coneccion.ejecutar(InsertaTipoNuevo);
                dispose();
                }
            }else
            {
            JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"El valor a editar no existe");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
   private void UpdateColor ()
    {
        try {
            Clases.ConexionBD Coneccion = new Clases.ConexionBD();
            
            if (ComparaExistenciaColor(AuxColor) == true)
            {
                if (ComparaExistenciaColorSegunda()== true)
                {
                String InsertaTipoNuevo = "update tipodecalzado set color = '"+Color.getText()+"'  where color = '"+AuxColor+"'";
                Coneccion.ejecutar(InsertaTipoNuevo);
                JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Correcto");
                dispose();
                }
                else
                {
                JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"EL color ya existe , no es necesario que lo agregue");
                String InsertaTipoNuevo = "update tipodecalzado set color = '"+""+"'  where color = '"+AuxColor+"'";
                Coneccion.ejecutar(InsertaTipoNuevo);
                dispose();
                }
            }else
            {
            JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"El valor a editar no existe");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void UpdateMaterial ()
    {
        try {
            Clases.ConexionBD Coneccion = new Clases.ConexionBD();
            
            if (ComparaExistenciaMaterial(AuxMaterial) == true)
            {
                if (ComparaExistenciaMaterialSegunda()== true)
                {
                String InsertaTipoNuevo = "update tipodecalzado set material = '"+Material.getText()+"'  where material = '"+AuxMaterial+"'";
                Coneccion.ejecutar(InsertaTipoNuevo);
                JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Correcto");
                dispose();
                }
                else
                {
                JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"EL material ya existe , no es necesario que lo agregue");
                String InsertaTipoNuevo = "update tipodecalzado set material = '"+""+"'  where material = '"+AuxMaterial+"'";
                Coneccion.ejecutar(InsertaTipoNuevo);
                dispose();
                }
            }else
            {
            JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"El valor a editar no existe");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(EditFeatures.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
