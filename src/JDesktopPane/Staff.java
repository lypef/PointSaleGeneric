/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package JDesktopPane;

import Clases.ConexionBD;
import java.awt.HeadlessException;
import java.awt.print.PrinterException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lypef_000
 */
public class Staff extends javax.swing.JInternalFrame {

    /**
     * Creates new form DeleteEmployee
     */
    String NivelDeUsuario;
    String UsuarioDeTrabajador;
    Boolean Veradmin = false,vervendedores = false,verroot = false,vermatutino = false,vervespertino = false;
    
    public Staff () {
        initComponents();
        setTitle("Personal");
        ModeloTabla ();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setClosable(true);
        setIconifiable(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setVisible(true);

        Tabla.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(Tabla);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Exit-Exit.png"))); // NOI18N
        jButton3.setText("Salir");
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Add.png"))); // NOI18N
        jButton4.setText("Agregar");
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Edit.png"))); // NOI18N
        jButton5.setText("Editar");
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Delete.png"))); // NOI18N
        jButton6.setText("Eliminar");
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Refresh.png"))); // NOI18N
        jButton7.setText("Actualizar");
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Print.png"))); // NOI18N
        jButton8.setText("Imprimir");
        jButton8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton8.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jMenu1.setText("Ver");

        jMenu3.setText("Nivel");

        jMenuItem1.setText("Vendedores");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setText("Administradores");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem3.setText("Root's");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenu1.add(jMenu3);

        jMenu4.setText("Turno");

        jMenuItem4.setText("Matutino");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem4);

        jMenuItem5.setText("Vespertino");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem5);

        jMenu1.add(jMenu4);

        jMenuItem6.setText("Todos");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(109, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3))
                    .addComponent(jButton8))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Editar ();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int x = Tabla.getSelectedRow();
        
        if (NivelDeUsuario.equalsIgnoreCase("vendedor"))
        {
        JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Acceso denegado");
        }else
        {
            if (JOptionPane.showInternalConfirmDialog(Desktop.Escritorio,"Esta seguro que desa eliminar el usuario " + (String) Tabla.getValueAt(x, 1),"¿Desea eliminar?",0) == 0)
            {
                    
            if (NivelDeUsuario.equalsIgnoreCase("root"))
            {
                if ("administrador".equalsIgnoreCase((String) Tabla.getValueAt(x, 9)) || "vendedor".equalsIgnoreCase((String) Tabla.getValueAt(x, 9)))
                {
                    DeleteStaff(Integer.parseInt((String) Tabla.getValueAt(x, 0)));
                }else
                {
                JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Acceso denegado");
                }
            }
        
            if (NivelDeUsuario.equalsIgnoreCase("administrador"))
            {
                if ("vendedor".equalsIgnoreCase((String) Tabla.getValueAt(x, 9)))
                {
                    DeleteStaff(Integer.parseInt((String) Tabla.getValueAt(x,0)));
                }else
                {
                JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Acceso denegado");
                }
            }
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (NivelDeUsuario.equalsIgnoreCase("vendedor") || NivelDeUsuario.equalsIgnoreCase("administrador"))
        {
        JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Acceso denegado");
        }else
        {
        AddStaff AddStaff = new AddStaff ();
        Desktop.Escritorio.add(AddStaff);
        AddStaff.setLocation(Desktop.Escritorio.getWidth() / 2 - AddStaff.getWidth() / 2, Desktop.Escritorio.getHeight() /2 - AddStaff.getHeight() / 2);
        AddStaff.toFront();
        AddStaff.show();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if (Veradmin == false && vermatutino == false && verroot == false && vervendedores == false && vervespertino == false)
        {
        ModeloTabla();
        }
        if (vervendedores == true)
        {
        VerVendedores();
        }
        if (Veradmin == true)
        {
        VerAdministradores();
        }
        if (verroot == true)
        {
        VerRoots();
        }
        if (vermatutino == true)
        {
        VerMatutino();
        }
        if (vervespertino == true)
        {
        VerVespertino();
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if (NivelDeUsuario.equalsIgnoreCase("vendedor"))
        {
        JOptionPane.showInternalMessageDialog(Desktop.Escritorio, "Accesso denegado");
        }
        if (NivelDeUsuario.equalsIgnoreCase("administrador"))
        {
        VerVendedores();
        }
        if (NivelDeUsuario.equalsIgnoreCase("root"))
        {
        VerVendedores();
        }
        vervendedores = true;
        Veradmin = false;
        verroot = false;
        vermatutino = false;
        vervespertino = false;
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if (NivelDeUsuario.equalsIgnoreCase("vendedor"))
        {
        JOptionPane.showInternalMessageDialog(Desktop.Escritorio, "Accesso denegado");
        
        }
        if (NivelDeUsuario.equalsIgnoreCase("administrador"))
        {
        VerAdministradores();
        }
        if (NivelDeUsuario.equalsIgnoreCase("root"))
        {
        VerAdministradores();
        }
        
        vervendedores = false;
        Veradmin = true;
        verroot = false;
        vermatutino = false;
        vervespertino = false;
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        if (NivelDeUsuario.equalsIgnoreCase("vendedor"))
        {
        JOptionPane.showInternalMessageDialog(Desktop.Escritorio, "Accesso denegado");
        }
        if (NivelDeUsuario.equalsIgnoreCase("administrador"))
        {
        JOptionPane.showInternalMessageDialog(Desktop.Escritorio, "Accesso denegado");
        }
        if (NivelDeUsuario.equalsIgnoreCase("root"))
        {
        VerRoots();
        }
        
        vervendedores = false;
        Veradmin = false;
        verroot = true;
        vermatutino = false;
        vervespertino = false;
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        if (NivelDeUsuario.equalsIgnoreCase("vendedor"))
        {
        JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Acceso denegado");
        }else
        {
        VerVespertino();
        }
        vervendedores = false;
        Veradmin = false;
        verroot = false;
        vermatutino = false;
        vervespertino = true;
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
     if (NivelDeUsuario.equalsIgnoreCase("vendedor"))
     {
     JOptionPane.showInternalMessageDialog(Desktop.Escritorio, "Acceso denegado");
     }else 
     {
     VerMatutino();
     }
        vervendedores = false;
        Veradmin = false;
        verroot = false;
        vermatutino = true;
        vervespertino = false;
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        ModeloTabla();
        vervendedores = false;
        Veradmin = false;
        verroot = false;
        vermatutino = false;
        vervespertino = false;
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        try {
            MessageFormat Header = new MessageFormat("LISTADO DE PERSONAL");
            Tabla.print(JTable.PrintMode.NORMAL, Header, null, false, null, true);
        } catch (PrinterException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (HeadlessException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Hecho");
    }//GEN-LAST:event_jButton8ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tabla;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
private void ModeloTabla (){
        try {
            DefaultTableModel modelo = new DefaultTableModel(){
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
            };
            String inserta [] = {"Id","Usuario","Nombre","A - paterno","A - materno","Direccion","Telefono","Turno","Email","Nivel"};
            modelo.setColumnIdentifiers(inserta);
            Tabla.setModel(modelo);
            Tabla.getTableHeader().setReorderingAllowed(false);
            Clases.ConexionBD coneccion = new Clases.ConexionBD ();
            String sql = "select * from usuarios";
            ResultSet rs = coneccion.Consulta(sql);
            String dato [] = new String [10];
            while (rs.next()){
            dato [0] = rs.getString(1);
            dato [1] = rs.getString(2); 
            dato [2] = rs.getString(4);
            dato [3] = rs.getString(5);
            dato [4] = rs.getString(6);
            dato [5] = rs.getString(7);
            dato [6] = rs.getString(8);
            dato [7] = rs.getString(9);
            dato [8] = rs.getString(10);
            dato [9] = rs.getString(11);
            modelo.addRow(dato);
            }
            
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

 private void Editar ()
    {
        EditStaff EditStaff = new EditStaff ();
        int  Seleccion = Tabla.getSelectedRow();
        
        if (Seleccion == -1)
        {
        JOptionPane.showInternalMessageDialog(Desktop.Escritorio, "Seleccione el usuario a editar");
        }else
        {
        
        if (NivelDeUsuario.equalsIgnoreCase("vendedor"))
        {
        JOptionPane.showInternalMessageDialog(Desktop.Escritorio, "Acceso denegado");
        }
        
        if (NivelDeUsuario.equalsIgnoreCase("administrador"))
        {
            if (NivelDeUsuario.equalsIgnoreCase((String) Tabla.getValueAt(Seleccion,9)) && UsuarioDeTrabajador.equalsIgnoreCase((String) Tabla.getValueAt(Seleccion, 1)))
            {
                EditStaff.AccesoAdministrador();
                Desktop.Escritorio.add(EditStaff);
                EditStaff.LlenadoDeDatosAdmin((String) Tabla.getValueAt(Seleccion,1));
                EditStaff.setLocation(Desktop.Escritorio.getWidth() / 2 - EditStaff.getWidth() /2, Desktop.Escritorio.getHeight() / 2 - EditStaff.getHeight() / 2);
                EditStaff.show();
            }else
            {
            if ("vendedor".equalsIgnoreCase((String) Tabla.getValueAt(Seleccion, 9)))
            {
                EditStaff.AccesoAdministrador();
                Desktop.Escritorio.add(EditStaff);
                EditStaff.LlenadoDeDatosAdmin((String) Tabla.getValueAt(Seleccion,1));
                EditStaff.setLocation(Desktop.Escritorio.getWidth() / 2 - EditStaff.getWidth() /2, Desktop.Escritorio.getHeight() / 2 - EditStaff.getHeight() / 2);
                EditStaff.show();            
            }else
            {
            JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Acceso denegado");
            }
            }
            }
        
        if (NivelDeUsuario.equalsIgnoreCase("root"))
        {
            if (NivelDeUsuario.equalsIgnoreCase((String) Tabla.getValueAt(Seleccion, 9)) && UsuarioDeTrabajador.equalsIgnoreCase((String) Tabla.getValueAt(Seleccion,1) ))
            {
                  Desktop.Escritorio.add(EditStaff);
                  EditStaff.LlenadoDeDatosRoot((String) Tabla.getValueAt(Seleccion, 1));
                  EditStaff.setLocation(Desktop.Escritorio.getWidth() / 2 - EditStaff.getWidth() /2, Desktop.Escritorio.getHeight() / 2 - EditStaff.getHeight() / 2);
                  EditStaff.show();
            }else
            {
                if ("administrador".equalsIgnoreCase((String) Tabla.getValueAt(Seleccion,9)))
                {
                  Desktop.Escritorio.add(EditStaff);
                  EditStaff.LlenadoDeDatosRoot((String) Tabla.getValueAt(Seleccion, 1));
                  EditStaff.setLocation(Desktop.Escritorio.getWidth() / 2 - EditStaff.getWidth() /2, Desktop.Escritorio.getHeight() / 2 - EditStaff.getHeight() / 2);                  
                  EditStaff.show();                
                }else
                {
                    if ("vendedor".equalsIgnoreCase((String) Tabla.getValueAt(Seleccion ,9)))
                            {
                              Desktop.Escritorio.add(EditStaff);
                              EditStaff.LlenadoDeDatosRoot((String) Tabla.getValueAt(Seleccion, 1));
                              EditStaff.setLocation(Desktop.Escritorio.getWidth() / 2 - EditStaff.getWidth() /2, Desktop.Escritorio.getHeight() / 2 - EditStaff.getHeight() / 2);
                              EditStaff.show();                                            
                            }else
                            {
                                JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Acceso denegado");
                            }
                }
            }

        }
        
        }
        
        
    }
 
    private void VerVendedores ()
    {
        try {
            DefaultTableModel modelo = new DefaultTableModel(){
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
            };
            String inserta [] = {"Id","Usuario","Nombre","A - paterno","A - materno","Direccion","Telefono","Turno","Email","Nivel"};
            modelo.setColumnIdentifiers(inserta);
            Tabla.setModel(modelo);
            Clases.ConexionBD coneccion = new Clases.ConexionBD ();
            String sql = "select * from vendedor";
            ResultSet rs = coneccion.Consulta(sql);
            String dato [] = new String [10];
            while (rs.next()){
                dato [0] = rs.getString(1);
                dato [1] = rs.getString(2);
                dato [2] = rs.getString(4);
                dato [3] = rs.getString(5);
                dato [4] = rs.getString(6);
                dato [5] = rs.getString(7);
                dato [6] = rs.getString(8);
                dato [7] = rs.getString(9);
                dato [8] = rs.getString(10);
                dato [9] = rs.getString(11);
                if (rs.getString(11).equalsIgnoreCase("vendedor"))
                {
                modelo.addRow(dato);                
                }

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void VerAdministradores ()
    {
        try {
            DefaultTableModel modelo = new DefaultTableModel(){
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
            };
            String inserta [] = {"Id","Usuario","Nombre","A - paterno","A - materno","Direccion","Telefono","Turno","Email","Nivel"};
            modelo.setColumnIdentifiers(inserta);
            Tabla.setModel(modelo);
            Clases.ConexionBD coneccion = new Clases.ConexionBD ();
            String sql = "select * from vendedor";
            ResultSet rs = coneccion.Consulta(sql);
            String dato [] = new String [10];
            while (rs.next()){
                dato [0] = rs.getString(1);
                dato [1] = rs.getString(2);
                dato [2] = rs.getString(4);
                dato [3] = rs.getString(5);
                dato [4] = rs.getString(6);
                dato [5] = rs.getString(7);
                dato [6] = rs.getString(8);
                dato [7] = rs.getString(9);
                dato [8] = rs.getString(10);
                dato [9] = rs.getString(11);
                if (rs.getString(11).equalsIgnoreCase("administrador"))
                {
                modelo.addRow(dato);                
                }

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
    private void VerRoots ()
    {
        try {
            DefaultTableModel modelo = new DefaultTableModel(){
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
            };
            String inserta [] = {"Id","Usuario","Nombre","A - paterno","A - materno","Direccion","Telefono","Turno","Email","Nivel"};
            modelo.setColumnIdentifiers(inserta);
            Tabla.setModel(modelo);
            Clases.ConexionBD coneccion = new Clases.ConexionBD ();
            String sql = "select * from vendedor";
            ResultSet rs = coneccion.Consulta(sql);
            String dato [] = new String [10];
            while (rs.next()){
                dato [0] = rs.getString(1);
                dato [1] = rs.getString(2);
                dato [2] = rs.getString(4);
                dato [3] = rs.getString(5);
                dato [4] = rs.getString(6);
                dato [5] = rs.getString(7);
                dato [6] = rs.getString(8);
                dato [7] = rs.getString(9);
                dato [8] = rs.getString(10);
                dato [9] = rs.getString(11);
                if (rs.getString(11).equalsIgnoreCase("root"))
                {
                modelo.addRow(dato);                
                }

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
    private void VerMatutino()
    {
        try {
            DefaultTableModel modelo = new DefaultTableModel(){
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
            };
            String inserta [] = {"Id","Usuario","Nombre","A - paterno","A - materno","Direccion","Telefono","Turno","Email","Nivel"};
            modelo.setColumnIdentifiers(inserta);
            Tabla.setModel(modelo);
            Clases.ConexionBD coneccion = new Clases.ConexionBD ();
            String sql = "select * from vendedor";
            ResultSet rs = coneccion.Consulta(sql);
            String dato [] = new String [10];
            while (rs.next()){
                dato [0] = rs.getString(1);
                dato [1] = rs.getString(2);
                dato [2] = rs.getString(4);
                dato [3] = rs.getString(5);
                dato [4] = rs.getString(6);
                dato [5] = rs.getString(7);
                dato [6] = rs.getString(8);
                dato [7] = rs.getString(9);
                dato [8] = rs.getString(10);
                dato [9] = rs.getString(11);
                if (rs.getString(9).equalsIgnoreCase("matutino"))
                {
                modelo.addRow(dato);                
                }

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
    private void VerVespertino ()
    {
        try {
            DefaultTableModel modelo = new DefaultTableModel(){
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
            };
            String inserta [] = {"Id","Usuario","Nombre","A - paterno","A - materno","Direccion","Telefono","Turno","Email","Nivel"};
            modelo.setColumnIdentifiers(inserta);
            Tabla.setModel(modelo);
            Clases.ConexionBD coneccion = new Clases.ConexionBD ();
            String sql = "select * from vendedor";
            ResultSet rs = coneccion.Consulta(sql);
            String dato [] = new String [10];
            while (rs.next()){
                dato [0] = rs.getString(1);
                dato [1] = rs.getString(2);
                dato [2] = rs.getString(4);
                dato [3] = rs.getString(5);
                dato [4] = rs.getString(6);
                dato [5] = rs.getString(7);
                dato [6] = rs.getString(8);
                dato [7] = rs.getString(9);
                dato [8] = rs.getString(10);
                dato [9] = rs.getString(11);
                if (rs.getString(9).equalsIgnoreCase("vespertino"))
                {
                modelo.addRow(dato);                
                }

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
    private void DeleteStaff (int x)
    {
        try {
            ConexionBD coneccion = new ConexionBD ();
            String sql = "DELETE  FROM vendedor WHERE idvendedor = '"+x+"';";
            coneccion.ejecutar(sql);
            DefaultTableModel table =  (DefaultTableModel) Tabla.getModel();
            table.fireTableChanged(null);
            ModeloTabla();
            JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Trabajador eliminado correctamente.");
        
        } catch (SQLException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        }
            
           
    }
}
