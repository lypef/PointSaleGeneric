/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package JDesktopPane;

import Clases.ConexionBD;
import java.awt.HeadlessException;
import java.awt.print.PrinterException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lypef_000
 */
public class Staff extends javax.swing.JInternalFrame {

    /**
     * Creates new form DeleteEmployee
     */
    String NivelDeUsuario;
    String UsuarioDeTrabajador;
    Boolean Veradmin = false,vervendedores = false,verroot = false,vermatutino = false,vervespertino = false;
    
    public Staff (String level, String Staff) {
        NivelDeUsuario = level;
        UsuarioDeTrabajador = Staff;
        initComponents();
        setTitle("Personal");
        ModeloTabla ();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setClosable(true);
        setIconifiable(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setVisible(true);

        Tabla.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        Tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TablaMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(Tabla);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Exit-Exit.png"))); // NOI18N
        jButton3.setText("Salir");
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Add.png"))); // NOI18N
        jButton4.setText("Agregar");
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Edit.png"))); // NOI18N
        jButton5.setText("Editar");
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Delete.png"))); // NOI18N
        jButton6.setText("Eliminar");
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Refresh.png"))); // NOI18N
        jButton7.setText("Actualizar");
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Print.png"))); // NOI18N
        jButton8.setText("Imprimir");
        jButton8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton8.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(109, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3))
                    .addComponent(jButton8))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Editar ();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int x = Tabla.getSelectedRow();
        
        if (JOptionPane.showInternalConfirmDialog(Desktop.Escritorio,"Esta seguro de eliminar el usuario "+Tabla.getValueAt(x, 0)+" ?","Â¿QUESTION?", 0) == 0)
        {
            if (NivelDeUsuario.equalsIgnoreCase("root"))
            {
                if (!UsuarioDeTrabajador.equalsIgnoreCase((String) Tabla.getValueAt(x, 0)))
                {
                    DeleteStaff((String) Tabla.getValueAt(x, 0));
                    ModeloTabla();
                }else
                {
                    JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"No puede eliminarse usted mismo.");
                }
            }else
            {
                JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Acceso denegado");
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (NivelDeUsuario.equalsIgnoreCase("vendedor"))
        {
            JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Acceso denegado");
        }else
        {
            AddUserSystem AddUserSystem = new AddUserSystem (NivelDeUsuario);
            Desktop.Escritorio.add(AddUserSystem);
            AddUserSystem.setLocation(Desktop.Escritorio.getWidth() / 2 - AddUserSystem.getWidth() / 2, Desktop.Escritorio.getHeight() /2 - AddUserSystem.getHeight() / 2);
            AddUserSystem.toFront();
            AddUserSystem.show();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        ModeloTabla();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        try {
            if (JOptionPane.showInternalConfirmDialog(Desktop.Escritorio,"Desea imprimir el contenido ?","Â¿QUESTION?", 0) == 0)
            {
               MessageFormat Header = new MessageFormat("LISTADO DE PERSONAL");
               Tabla.print(JTable.PrintMode.NORMAL, Header, null, false, null, true);
               JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Hecho");
            }
            
        } catch (PrinterException | HeadlessException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void TablaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMousePressed
        if (evt.getClickCount() >= 2)
        {
            Editar();
        }
    }//GEN-LAST:event_TablaMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tabla;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
private void ModeloTabla (){
        try {
            DefaultTableModel modelo = new DefaultTableModel(){
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
            };
            String inserta [] = {"USUARIO","NOMBRE","APELLIDOS","DIRECCION", "LEVEL"};
            modelo.setColumnIdentifiers(inserta);
            Tabla.setModel(modelo);
            Tabla.getTableHeader().setReorderingAllowed(false);
            Tabla.getColumnModel().getColumn(0).setPreferredWidth(150);
            Tabla.getColumnModel().getColumn(1).setPreferredWidth(300);
            Tabla.getColumnModel().getColumn(2).setPreferredWidth(400);
            Tabla.getColumnModel().getColumn(3).setPreferredWidth(300);
            Tabla.getColumnModel().getColumn(4).setPreferredWidth(200);
            
            Clases.ConexionBD coneccion = new Clases.ConexionBD ();
            
            String sql = "";
            if (NivelDeUsuario.equalsIgnoreCase("administrador"))
            {
                sql = "SELECT * FROM `usuarios` WHERE Nivel = 'vendedor' or Usuario = '"+ UsuarioDeTrabajador +"' ";
            }
            else if(NivelDeUsuario.equalsIgnoreCase("root"))
            {
                sql = "SELECT * FROM `usuarios` WHERE Nivel = 'vendedor' or Usuario = '"+ UsuarioDeTrabajador +"' or Nivel = 'administrador'";
            }
            
            ResultSet rs = coneccion.Consulta(sql);
            String dato [] = new String [5];
            while (rs.next()){
            dato [0] = rs.getString(1);
            dato [1] = rs.getString(3); 
            dato [2] = rs.getString(4) + " " +rs.getString(5);
            dato [3] = rs.getString(6);
            dato [4] = rs.getString(9);
            
            modelo.addRow(dato);
            }
            
            
        } catch (ClassNotFoundException | SQLException | InstantiationException | IllegalAccessException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

 private void Editar ()
    {
        int  Seleccion = Tabla.getSelectedRow();
        
        if (Seleccion == -1)
        {
            JOptionPane.showInternalMessageDialog(Desktop.Escritorio, "Seleccione el usuario a editar");
        }else
        {
            EditUserSystem EditStaff = new EditUserSystem(NivelDeUsuario, Tabla.getValueAt(Seleccion, 0).toString());
            Desktop.Escritorio.add(EditStaff);
            EditStaff.setLocation(Desktop.Escritorio.getWidth() / 2 - EditStaff.getWidth() /2, Desktop.Escritorio.getHeight() / 2 - EditStaff.getHeight() / 2);
            EditStaff.show();
        }
        
        
    }
 
    private void VerVendedores ()
    {
        try {
            DefaultTableModel modelo = new DefaultTableModel(){
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
            };
            String inserta [] = {"Id","Usuario","Nombre","A - paterno","A - materno","Direccion","Telefono","Turno","Email","Nivel"};
            modelo.setColumnIdentifiers(inserta);
            Tabla.setModel(modelo);
            Clases.ConexionBD coneccion = new Clases.ConexionBD ();
            String sql = "select * from vendedor";
            ResultSet rs = coneccion.Consulta(sql);
            String dato [] = new String [10];
            while (rs.next()){
                dato [0] = rs.getString(1);
                dato [1] = rs.getString(2);
                dato [2] = rs.getString(4);
                dato [3] = rs.getString(5);
                dato [4] = rs.getString(6);
                dato [5] = rs.getString(7);
                dato [6] = rs.getString(8);
                dato [7] = rs.getString(9);
                dato [8] = rs.getString(10);
                dato [9] = rs.getString(11);
                if (rs.getString(11).equalsIgnoreCase("vendedor"))
                {
                modelo.addRow(dato);                
                }

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void VerAdministradores ()
    {
        try {
            DefaultTableModel modelo = new DefaultTableModel(){
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
            };
            String inserta [] = {"Id","Usuario","Nombre","A - paterno","A - materno","Direccion","Telefono","Turno","Email","Nivel"};
            modelo.setColumnIdentifiers(inserta);
            Tabla.setModel(modelo);
            Clases.ConexionBD coneccion = new Clases.ConexionBD ();
            String sql = "select * from vendedor";
            ResultSet rs = coneccion.Consulta(sql);
            String dato [] = new String [10];
            while (rs.next()){
                dato [0] = rs.getString(1);
                dato [1] = rs.getString(2);
                dato [2] = rs.getString(4);
                dato [3] = rs.getString(5);
                dato [4] = rs.getString(6);
                dato [5] = rs.getString(7);
                dato [6] = rs.getString(8);
                dato [7] = rs.getString(9);
                dato [8] = rs.getString(10);
                dato [9] = rs.getString(11);
                if (rs.getString(11).equalsIgnoreCase("administrador"))
                {
                modelo.addRow(dato);                
                }

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
    private void VerRoots ()
    {
        try {
            DefaultTableModel modelo = new DefaultTableModel(){
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
            };
            String inserta [] = {"Id","Usuario","Nombre","A - paterno","A - materno","Direccion","Telefono","Turno","Email","Nivel"};
            modelo.setColumnIdentifiers(inserta);
            Tabla.setModel(modelo);
            Clases.ConexionBD coneccion = new Clases.ConexionBD ();
            String sql = "select * from vendedor";
            ResultSet rs = coneccion.Consulta(sql);
            String dato [] = new String [10];
            while (rs.next()){
                dato [0] = rs.getString(1);
                dato [1] = rs.getString(2);
                dato [2] = rs.getString(4);
                dato [3] = rs.getString(5);
                dato [4] = rs.getString(6);
                dato [5] = rs.getString(7);
                dato [6] = rs.getString(8);
                dato [7] = rs.getString(9);
                dato [8] = rs.getString(10);
                dato [9] = rs.getString(11);
                if (rs.getString(11).equalsIgnoreCase("root"))
                {
                modelo.addRow(dato);                
                }

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
    private void VerMatutino()
    {
        try {
            DefaultTableModel modelo = new DefaultTableModel(){
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
            };
            String inserta [] = {"Id","Usuario","Nombre","A - paterno","A - materno","Direccion","Telefono","Turno","Email","Nivel"};
            modelo.setColumnIdentifiers(inserta);
            Tabla.setModel(modelo);
            Clases.ConexionBD coneccion = new Clases.ConexionBD ();
            String sql = "select * from vendedor";
            ResultSet rs = coneccion.Consulta(sql);
            String dato [] = new String [10];
            while (rs.next()){
                dato [0] = rs.getString(1);
                dato [1] = rs.getString(2);
                dato [2] = rs.getString(4);
                dato [3] = rs.getString(5);
                dato [4] = rs.getString(6);
                dato [5] = rs.getString(7);
                dato [6] = rs.getString(8);
                dato [7] = rs.getString(9);
                dato [8] = rs.getString(10);
                dato [9] = rs.getString(11);
                if (rs.getString(9).equalsIgnoreCase("matutino"))
                {
                modelo.addRow(dato);                
                }

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
    private void VerVespertino ()
    {
        try {
            DefaultTableModel modelo = new DefaultTableModel(){
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
            };
            String inserta [] = {"Id","Usuario","Nombre","A - paterno","A - materno","Direccion","Telefono","Turno","Email","Nivel"};
            modelo.setColumnIdentifiers(inserta);
            Tabla.setModel(modelo);
            Clases.ConexionBD coneccion = new Clases.ConexionBD ();
            String sql = "select * from vendedor";
            ResultSet rs = coneccion.Consulta(sql);
            String dato [] = new String [10];
            while (rs.next()){
                dato [0] = rs.getString(1);
                dato [1] = rs.getString(2);
                dato [2] = rs.getString(4);
                dato [3] = rs.getString(5);
                dato [4] = rs.getString(6);
                dato [5] = rs.getString(7);
                dato [6] = rs.getString(8);
                dato [7] = rs.getString(9);
                dato [8] = rs.getString(10);
                dato [9] = rs.getString(11);
                if (rs.getString(9).equalsIgnoreCase("vespertino"))
                {
                modelo.addRow(dato);                
                }

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
    private void DeleteStaff (String x)
    {
        try {
            ConexionBD coneccion = new ConexionBD ();
            String sql = "DELETE  FROM usuarios WHERE usuario = '"+x+"';";
            coneccion.ejecutar(sql);
            DefaultTableModel table =  (DefaultTableModel) Tabla.getModel();
            table.fireTableChanged(null);
            ModeloTabla();
            JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"El usuario ah sido eliminado correctamente.");
        
        } catch (SQLException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        }
            
           
    }
}
