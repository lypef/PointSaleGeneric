/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package JDesktopPane;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lypef
 */
public class Features extends javax.swing.JInternalFrame {

    /**
     * Creates new form Features
     */
    String NivelDeUsuario , NombreDeUsuario;
    public Features() {
        initComponents();
        setTitle("Add Features");
        ModeloTablaTipo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TablaTipo = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);

        TablaTipo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Title 1"
            }
        ));
        jScrollPane1.setViewportView(TablaTipo);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Add.png"))); // NOI18N
        jButton1.setText("Agregar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Exit-Exit.png"))); // NOI18N
        jButton2.setText("Salir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Edit.png"))); // NOI18N
        jButton3.setText("Editar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Refresh.png"))); // NOI18N
        jButton4.setText("Actualizar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Exit.png"))); // NOI18N
        jButton5.setText("Eliminar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        AddFeatures AddFeatures = new AddFeatures ();
        Desktop.Escritorio.add(AddFeatures);
        AddFeatures.setLocation(Desktop.Escritorio.getWidth() / 2 - AddFeatures.getWidth() / 2, Desktop.Escritorio.getHeight() / 2 - AddFeatures.getHeight() /2);
        AddFeatures.toFront();
        AddFeatures.show();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        ModeloTablaTipo();
        ModeloTablaMaterial();
        ModeloTablaColor();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (JOptionPane.showConfirmDialog(Desktop.Escritorio, "Â¿ Esta seguro que desea eliminar lo que ha seleccionado ?","Eliminar",0)==0)
        {
        DeletesFeaturesSeleccion ();
        ActualizarTablas();
        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int SeleccionTipo = TablaTipo.getSelectedRow();
        
        EditFeatures EditFeatures = new EditFeatures();
        
        Desktop.Escritorio.add(EditFeatures);
        EditFeatures.setLocation(Desktop.Escritorio.getWidth() / 2 - EditFeatures.getWidth() / 2, Desktop.Escritorio.getHeight() / 2 - EditFeatures.getHeight() / 2);
        
        if (SeleccionTipo >= 0 )
        {
        EditFeatures.ValoresAeditar((String)TablaTipo.getValueAt(SeleccionTipo, 0), "", "");
        EditFeatures.AuxTipo = (String)TablaTipo.getValueAt(SeleccionTipo, 0);
        EditFeatures.show();
        }
      
        if (SeleccionTipo == -1)
        {
        JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Seleccione al menos una caracteristica a editar");
        }
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaTipo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void ModeloTablaTipo() 
    {
        try {
            DefaultTableModel DefaultTableModel = new DefaultTableModel(){
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
            };
            TablaTipo.getTableHeader().setReorderingAllowed(false);
            String Contenido [] = {"Tipo"};
            DefaultTableModel.setColumnIdentifiers(Contenido);
            TablaTipo.setModel(DefaultTableModel);
            TablaTipo.getTableHeader().setReorderingAllowed(false);
            Clases.ConexionBD Coneccion = new Clases.ConexionBD();
            String sql = "select * from tipodecalzado";
            
            ResultSet ResultSet = Coneccion.Consulta(sql);
            
            String valores [] = new String [1];
            
            while (ResultSet.next())
            {
                valores [0] = ResultSet.getString(1);
                if (!ResultSet.getString(1).equalsIgnoreCase(""))
                {
                DefaultTableModel.addRow(valores);
                }
                
            }
        
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Features.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Features.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Features.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Features.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
       
    private void ModeloTablaColor() 
    {
       try {
            DefaultTableModel DefaultTableModel = new DefaultTableModel(){
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
            };
            String Contenido [] = {"Color"};
            DefaultTableModel.setColumnIdentifiers(Contenido);
            Clases.ConexionBD Coneccion = new Clases.ConexionBD();
            String sql = "select * from tipodecalzado";
            
            ResultSet ResultSet = Coneccion.Consulta(sql);
            
            String valores [] = new String [1];
            
            while (ResultSet.next())
            {
                valores [0] = ResultSet.getString(2);
                if (!ResultSet.getString(2).equalsIgnoreCase(""))
                {
                DefaultTableModel.addRow(valores);
                }
                
            }
        
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Features.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Features.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Features.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Features.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void ModeloTablaMaterial() 
    {
       try {
            DefaultTableModel DefaultTableModel = new DefaultTableModel(){
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
            };
            String Contenido [] = {"Material"};
            DefaultTableModel.setColumnIdentifiers(Contenido);
            Clases.ConexionBD Coneccion = new Clases.ConexionBD();
            String sql = "select * from tipodecalzado";
            
            ResultSet ResultSet = Coneccion.Consulta(sql);
            
            String valores [] = new String [1];
            
            while (ResultSet.next())
            {
                valores [0] = ResultSet.getString(3);
                if (!ResultSet.getString(3).equalsIgnoreCase(""))
                {
                DefaultTableModel.addRow(valores);
                }
                
            }
        
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Features.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Features.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Features.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Features.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void DeletesFeaturesSeleccion() {
        try {
            int SeleccionTablaTipo = TablaTipo.getSelectedRow();
            
            Clases.ConexionBD Coneccion = new Clases.ConexionBD();
            
            if (SeleccionTablaTipo == -1 )
            {
                JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Seleccione almenos una caracteristica a eliminar");
            }
           
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Features.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Features.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Features.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Features.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
    }
    private String DeleteFeatures (String Tabla,String Dato)
    {
        String Orden = "update tipodecalzado set "+Tabla+" = '"+""+"'  where "+Tabla+" = '"+Dato+"'";
        return Orden;
    }
    private void MessageCorrecto ()
    {
    JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Corecto");
    }
    private void ActualizarTablas ()
    {
        ModeloTablaTipo();
        ModeloTablaMaterial();
        ModeloTablaColor();
    }

}
