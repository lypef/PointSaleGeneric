/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JDesktopPane;

import Clases.ConexionBD;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lypef
 */
public class SalesCredit extends javax.swing.JInternalFrame {

    /**
     * Creates new form SalesCredit
     */
    DefaultTableModel DefaultTableModel = new DefaultTableModel ();
    String  valores [] = {"Piezas","Id","Codigo de barra","Producto","Precio"};
    
    public SalesCredit() {
        initComponents();
        this.setTitle("CREDITOS");
        DefaultTableModel.setColumnIdentifiers(valores);
        TablaNotaVenta.setModel(DefaultTableModel);
        LoadClientes();
    }

    public void NotaDeVenta ( int piezas , int id , String CodigoBarra , String Producto , double precio)
    {
        String Valores [] = new String [5];
        
        Valores [0] = String.valueOf(piezas);
        Valores [1] = String.valueOf(id);
        Valores [2] = CodigoBarra;
        Valores [3] = Producto;
        Valores [4] = String.valueOf(precio);
        
        DefaultTableModel.addRow(Valores);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TablaNotaVenta = new javax.swing.JTable();
        TxtTotal = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        JcomboBoxClientes = new javax.swing.JComboBox<>();
        Date = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        TablaNotaVenta.setAutoCreateRowSorter(true);
        TablaNotaVenta.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        TablaNotaVenta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(TablaNotaVenta);

        TxtTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        TxtTotal.setForeground(new java.awt.Color(255, 0, 0));
        TxtTotal.setText("00000.00");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 0, 0));
        jLabel6.setText("TOTAL A PAGAR: $");

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/credit_card.png"))); // NOI18N
        jButton5.setText("FINALIZAR");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setText("FECHA DE PAGO");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setText("CLIENTE");

        jButton1.setText("x");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(JcomboBoxClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(Date, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(14, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(TxtTotal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(11, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(217, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JcomboBoxClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TxtTotal)
                    .addComponent(jLabel6)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(15, 15, 15)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(154, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (Date.getDate() != null)
        {
            UpdateStockDB();
            int Cliente = ((Items) JcomboBoxClientes.getSelectedItem()).getId();
            Date fecha = Date.getDate();
            SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");


            int x = TablaNotaVenta.getRowCount() -1;

            while (x >= 0)
            {
                updateVentabd(Cliente, (String) TablaNotaVenta.getValueAt(x, 3), Double.parseDouble((String) TablaNotaVenta.getValueAt(x, 0)) * Double.parseDouble((String) TablaNotaVenta.getValueAt(x, 4)), String.valueOf(formato.format(fecha)) );
                updateProductosVendidos(Integer.parseInt((String) TablaNotaVenta.getValueAt(x, 0)) , Integer.parseInt( (String) TablaNotaVenta.getValueAt(x, 1)));
                x --;
            }
            this.dispose();
            JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"HECHO");
        }else
        {
            JOptionPane.showInternalMessageDialog(Desktop.Escritorio,"Seleccione una fecha de pago.");
        }
    }//GEN-LAST:event_jButton5ActionPerformed
    
    private void updateVentabd(int cliente, String producto, Double monto, String fechapago) {
      
        try {
                String ID = "INSERT INTO `creditos`(`cliente_id`, `producto`, `monto`, `fechapago`) VALUES ('"+cliente+"','"+producto.toUpperCase()+"',"
                        + "'"+monto+"','"+fechapago+"')";
                
                ConexionBD BD = new ConexionBD ();
                
                BD.ejecutar(ID);
                dispose();
            } catch (ClassNotFoundException | SQLException | InstantiationException | IllegalAccessException ex) {
                JOptionPane.showInternalMessageDialog(Desktop.Escritorio,ex);
            }
        
    }
    
    private void UpdateStockDB() 
    {
        try {
            Clases.ConexionBD Coneccion = new Clases.ConexionBD();
            
            int x = TablaNotaVenta.getRowCount() -1;
            
            while (x >= 0)
            {
                int valor = 0;
                String sql = "select * from productos where id ='"+Integer.parseInt((String) TablaNotaVenta.getValueAt(x, 1))+"';";
                ResultSet  busca = Coneccion.Consulta(sql);
                while (busca.next())
                {
                        valor = busca.getInt(6);
                }
                int stock = valor - Integer.parseInt((String) TablaNotaVenta.getValueAt(x, 0));
                String sql1 = "update productos set stock = '"+stock+"' where id = '"+Integer.parseInt((String) TablaNotaVenta.getValueAt(x, 1))+"'";
                Coneccion.ejecutar(sql1);    
                
                x --;
            }
        } catch (ClassNotFoundException | SQLException | InstantiationException | IllegalAccessException ex) {
            Logger.getLogger(SalesNormal.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }
    
    private void updateProductosVendidos(int piezas , int id) {
      
        if (id != 0)
        {
                try {

                Clases.ConexionBD coneccion = new Clases.ConexionBD();

                String Busqueda = "select * from productos where id ='"+id+"';";
                ResultSet BusquedaR = coneccion.Consulta(Busqueda);

                while (BusquedaR.next())
                {
                    if (id == BusquedaR.getInt(1))
                    {
                    Clases.ConexionBD coneccion0 = new Clases.ConexionBD();
                    int suma = BusquedaR.getInt(7) + piezas;     
                    String update = "update productos set vendidos = '"+suma+"' where id = '"+id+"'";  
                    coneccion0.ejecutar(update);
                    }
                }

            } catch (ClassNotFoundException | SQLException | InstantiationException | IllegalAccessException ex) {
                Logger.getLogger(SalesNormal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    public void TxtTotal (String total)
    {
        TxtTotal.setText(total);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser Date;
    private javax.swing.JComboBox<String> JcomboBoxClientes;
    private javax.swing.JTable TablaNotaVenta;
    private javax.swing.JLabel TxtTotal;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void LoadClientes() 
    {
        JcomboBoxClientes.removeAllItems();
        try {
                Clases.ConexionBD Coneccion = new Clases.ConexionBD();
                String sql = "SELECT * FROM clientes ORDER by Nombre asc";
                ResultSet rs = Coneccion.Consulta(sql);
                
                DefaultComboBoxModel model = new DefaultComboBoxModel();
                while (rs.next())
                {
                    model.addElement(new Items(rs.getInt(1), rs.getString(2) + " " + rs.getString(3)));
                }
                JcomboBoxClientes.setModel(model);
                
            } catch (ClassNotFoundException | SQLException | InstantiationException | IllegalAccessException ex) {
                Logger.getLogger(Sales.class.getName()).log(Level.SEVERE, null, ex);
            }
    }

    public class Items {

        public Items(int id, String texto) {
            this.id = id;
            this.texto = texto;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getTexto() {
            return texto;
        }

        public void setTexto(String texto) {
            this.texto = texto;
        }
        int id;
        String texto;

        @Override
        public String toString() {
            return getTexto();
        }

    }

}
